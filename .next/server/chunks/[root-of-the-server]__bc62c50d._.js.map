{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 3, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"","debugId":null}},
    {"offset": {"line": 81, "column": 0}, "map": {"version":3,"sources":["file:///C:/Users/lenovo/OneDrive/Desktop/interview-platform/firebase/admin.ts"],"sourcesContent":["import {initializeApp , cert , getApps} from \"firebase-admin/app\";\r\nimport {getAuth} from \"firebase-admin/auth\";\r\nimport {getFirestore} from \"firebase-admin/firestore\";\r\n\r\nconst initFirebaseAdmin = () => {\r\n    const apps = getApps();\r\n\r\n    if(!apps.length){\r\n        initializeApp({\r\n            credential : cert({\r\n                projectId : process.env.FIREBASE_PROJECT_ID,\r\n                clientEmail : process.env.FIREBASE_CLIENT_EMAIL,\r\n                privateKey : process.env.FIREBASE_PRIVATE_KEY?.replace(/\\\\n/g, \"\\n\"),\r\n            }),\r\n        });\r\n    }\r\n\r\n\r\n    return {\r\n        auth : getAuth(),\r\n        db : getFirestore(),\r\n    }\r\n}\r\n\r\nexport const {db: adminDb, auth} = initFirebaseAdmin()"],"names":[],"mappings":";;;;;;AAAA;AACA;AACA;;;;;;;;;;AAEA,MAAM,oBAAoB;IACtB,MAAM,OAAO,IAAA,2JAAO;IAEpB,IAAG,CAAC,KAAK,MAAM,EAAC;QACZ,IAAA,iKAAa,EAAC;YACV,YAAa,IAAA,wJAAI,EAAC;gBACd,WAAY,QAAQ,GAAG,CAAC,mBAAmB;gBAC3C,aAAc,QAAQ,GAAG,CAAC,qBAAqB;gBAC/C,YAAa,QAAQ,GAAG,CAAC,oBAAoB,EAAE,QAAQ,QAAQ;YACnE;QACJ;IACJ;IAGA,OAAO;QACH,MAAO,IAAA,6JAAO;QACd,IAAK,IAAA,4KAAY;IACrB;AACJ;AAEO,MAAM,EAAC,IAAI,OAAO,EAAE,IAAI,EAAC,GAAG","debugId":null}},
    {"offset": {"line": 183, "column": 0}, "map": {"version":3,"sources":["file:///C:/Users/lenovo/OneDrive/Desktop/interview-platform/app/api/upload-resume/route.ts"],"sourcesContent":["import { NextRequest, NextResponse } from 'next/server';\nimport { adminDb } from '@/firebase/admin';\nimport PDFParser from 'pdf2json';\nimport { writeFileSync, unlinkSync } from 'fs';\nimport { join } from 'path';\nimport { tmpdir } from 'os';\n\nexport async function POST(request: NextRequest) {\n  try {\n    const formData = await request.formData();\n    const file = formData.get('resume') as File;\n    const userId = formData.get('userId') as string;\n\n    if (!file || !userId) {\n      return NextResponse.json({ error: 'Missing file or userId' }, { status: 400 });\n    }\n\n    if (file.type !== 'application/pdf') {\n      return NextResponse.json({ error: 'Only PDF files are allowed' }, { status: 400 });\n    }\n\n    // Convert file to buffer\n    const buffer = Buffer.from(await file.arrayBuffer());\n    \n    // Extract text from PDF using pdf2json\n    const tempPath = join(tmpdir(), `temp-${Date.now()}.pdf`);\n    writeFileSync(tempPath, buffer);\n    \n    const resumeText = await new Promise<string>((resolve, reject) => {\n      const pdfParser = new (PDFParser as any)(null, 1);\n      \n      pdfParser.on('pdfParser_dataError', (errData: any) => {\n        console.error('PDF parsing error:', errData.parserError);\n        unlinkSync(tempPath);\n        reject(new Error('Failed to parse PDF'));\n      });\n      \n      pdfParser.on('pdfParser_dataReady', (pdfData: any) => {\n        try {\n          let text = '';\n          if (pdfData.Pages) {\n            pdfData.Pages.forEach((page: any) => {\n              if (page.Texts) {\n                page.Texts.forEach((textItem: any) => {\n                  if (textItem.R) {\n                    textItem.R.forEach((textRun: any) => {\n                      if (textRun.T) {\n                        text += decodeURIComponent(textRun.T) + ' ';\n                      }\n                    });\n                  }\n                });\n              }\n              text += '\\n';\n            });\n          }\n          unlinkSync(tempPath);\n          resolve(text.trim() || 'No text could be extracted from PDF');\n        } catch (error) {\n          unlinkSync(tempPath);\n          reject(error);\n        }\n      });\n      \n      pdfParser.loadPDF(tempPath);\n    });\n\n    // Store resume data using Admin SDK\n    const resumeDoc = {\n      userId,\n      fileName: file.name,\n      extractedText: resumeText,\n      uploadedAt: new Date(),\n    };\n\n    await adminDb.collection('resumes').doc(userId).set(resumeDoc);\n\n    return NextResponse.json({ \n      success: true, \n      resumeText\n    });\n\n  } catch (error) {\n    console.error('Error uploading resume:', error);\n    return NextResponse.json({ \n      error: 'Failed to upload and process resume' \n    }, { status: 500 });\n  }\n}"],"names":[],"mappings":";;;;AAAA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;AAEO,eAAe,KAAK,OAAoB;IAC7C,IAAI;QACF,MAAM,WAAW,MAAM,QAAQ,QAAQ;QACvC,MAAM,OAAO,SAAS,GAAG,CAAC;QAC1B,MAAM,SAAS,SAAS,GAAG,CAAC;QAE5B,IAAI,CAAC,QAAQ,CAAC,QAAQ;YACpB,OAAO,gJAAY,CAAC,IAAI,CAAC;gBAAE,OAAO;YAAyB,GAAG;gBAAE,QAAQ;YAAI;QAC9E;QAEA,IAAI,KAAK,IAAI,KAAK,mBAAmB;YACnC,OAAO,gJAAY,CAAC,IAAI,CAAC;gBAAE,OAAO;YAA6B,GAAG;gBAAE,QAAQ;YAAI;QAClF;QAEA,yBAAyB;QACzB,MAAM,SAAS,OAAO,IAAI,CAAC,MAAM,KAAK,WAAW;QAEjD,uCAAuC;QACvC,MAAM,WAAW,IAAA,yGAAI,EAAC,IAAA,uGAAM,KAAI,CAAC,KAAK,EAAE,KAAK,GAAG,GAAG,IAAI,CAAC;QACxD,IAAA,8GAAa,EAAC,UAAU;QAExB,MAAM,aAAa,MAAM,IAAI,QAAgB,CAAC,SAAS;YACrD,MAAM,YAAY,IAAK,0JAAS,CAAS,MAAM;YAE/C,UAAU,EAAE,CAAC,uBAAuB,CAAC;gBACnC,QAAQ,KAAK,CAAC,sBAAsB,QAAQ,WAAW;gBACvD,IAAA,2GAAU,EAAC;gBACX,OAAO,IAAI,MAAM;YACnB;YAEA,UAAU,EAAE,CAAC,uBAAuB,CAAC;gBACnC,IAAI;oBACF,IAAI,OAAO;oBACX,IAAI,QAAQ,KAAK,EAAE;wBACjB,QAAQ,KAAK,CAAC,OAAO,CAAC,CAAC;4BACrB,IAAI,KAAK,KAAK,EAAE;gCACd,KAAK,KAAK,CAAC,OAAO,CAAC,CAAC;oCAClB,IAAI,SAAS,CAAC,EAAE;wCACd,SAAS,CAAC,CAAC,OAAO,CAAC,CAAC;4CAClB,IAAI,QAAQ,CAAC,EAAE;gDACb,QAAQ,mBAAmB,QAAQ,CAAC,IAAI;4CAC1C;wCACF;oCACF;gCACF;4BACF;4BACA,QAAQ;wBACV;oBACF;oBACA,IAAA,2GAAU,EAAC;oBACX,QAAQ,KAAK,IAAI,MAAM;gBACzB,EAAE,OAAO,OAAO;oBACd,IAAA,2GAAU,EAAC;oBACX,OAAO;gBACT;YACF;YAEA,UAAU,OAAO,CAAC;QACpB;QAEA,oCAAoC;QACpC,MAAM,YAAY;YAChB;YACA,UAAU,KAAK,IAAI;YACnB,eAAe;YACf,YAAY,IAAI;QAClB;QAEA,MAAM,8HAAO,CAAC,UAAU,CAAC,WAAW,GAAG,CAAC,QAAQ,GAAG,CAAC;QAEpD,OAAO,gJAAY,CAAC,IAAI,CAAC;YACvB,SAAS;YACT;QACF;IAEF,EAAE,OAAO,OAAO;QACd,QAAQ,KAAK,CAAC,2BAA2B;QACzC,OAAO,gJAAY,CAAC,IAAI,CAAC;YACvB,OAAO;QACT,GAAG;YAAE,QAAQ;QAAI;IACnB;AACF","debugId":null}}]
}