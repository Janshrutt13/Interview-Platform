{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 3, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"","debugId":null}},
    {"offset": {"line": 81, "column": 0}, "map": {"version":3,"sources":["file:///C:/Users/lenovo/OneDrive/Desktop/interview-platform/firebase/admin.ts"],"sourcesContent":["import {initializeApp , cert , getApps} from \"firebase-admin/app\";\r\nimport {getAuth} from \"firebase-admin/auth\";\r\nimport {getFirestore} from \"firebase-admin/firestore\";\r\n\r\nconst initFirebaseAdmin = () => {\r\n    const apps = getApps();\r\n\r\n    if(!apps.length){\r\n        initializeApp({\r\n            credential : cert({\r\n                projectId : process.env.FIREBASE_PROJECT_ID,\r\n                clientEmail : process.env.FIREBASE_CLIENT_EMAIL,\r\n                privateKey : process.env.FIREBASE_PRIVATE_KEY?.replace(/\\\\n/g, \"\\n\"),\r\n            }),\r\n        });\r\n    }\r\n\r\n\r\n    return {\r\n        auth : getAuth(),\r\n        db : getFirestore(),\r\n    }\r\n}\r\n\r\nexport const {db, auth} = initFirebaseAdmin()"],"names":[],"mappings":";;;;;;AAAA;AACA;AACA;;;;;;;;;;AAEA,MAAM,oBAAoB;IACtB,MAAM,OAAO,IAAA,2JAAO;IAEpB,IAAG,CAAC,KAAK,MAAM,EAAC;QACZ,IAAA,iKAAa,EAAC;YACV,YAAa,IAAA,wJAAI,EAAC;gBACd,WAAY,QAAQ,GAAG,CAAC,mBAAmB;gBAC3C,aAAc,QAAQ,GAAG,CAAC,qBAAqB;gBAC/C,YAAa,QAAQ,GAAG,CAAC,oBAAoB,EAAE,QAAQ,QAAQ;YACnE;QACJ;IACJ;IAGA,OAAO;QACH,MAAO,IAAA,6JAAO;QACd,IAAK,IAAA,4KAAY;IACrB;AACJ;AAEO,MAAM,EAAC,EAAE,EAAE,IAAI,EAAC,GAAG","debugId":null}},
    {"offset": {"line": 123, "column": 0}, "map": {"version":3,"sources":["file:///C:/Users/lenovo/OneDrive/Desktop/interview-platform/lib/actions/auth.action.ts"],"sourcesContent":["'use server';\r\n\r\nimport { db, auth } from \"@/firebase/admin\";\r\nimport { cookies } from \"next/headers\";\r\n\r\nconst ONE_WEEK = 60 * 60 * 24 * 7; // seconds in a week\r\n\r\nexport async function signUp(params: SignUpParams) {\r\n    const { uid, name, email } = params;\r\n\r\n    try {\r\n        const userRecord = await db.collection(\"users\").doc(uid).get();\r\n\r\n        if (userRecord.exists) {\r\n            return {\r\n                success: false,\r\n                message: \"User already exists, please Sign Up\",\r\n            };\r\n        }\r\n\r\n        await db.collection(\"users\").doc(uid).set({\r\n            name,\r\n            email,\r\n        });\r\n\r\n        return {\r\n            success: true,\r\n            message: \"User created successfully\",\r\n        };\r\n    } catch (e: any) {\r\n        console.error(\"Error creating user\", e);\r\n\r\n        if (e.code === \"auth/email-already-exists\") {\r\n            return {\r\n                success: false,\r\n                message: \"Email already exists\",\r\n            };\r\n        }\r\n\r\n        return {\r\n            success: false,\r\n            message: \"Failed to create user\",\r\n        };\r\n    }\r\n}\r\n\r\nexport async function setSessionCookie(idToken: string) {\r\n    const cookieStore = await cookies();\r\n\r\n    const sessionCookie = await auth.createSessionCookie(idToken, {\r\n        expiresIn: ONE_WEEK * 1000, // ms\r\n    });\r\n\r\n    cookieStore.set(\"session\", sessionCookie, {\r\n        maxAge: ONE_WEEK,\r\n        httpOnly: true,\r\n        secure: process.env.NODE_ENV === \"production\",\r\n        path: \"/\",\r\n        sameSite: \"lax\",\r\n    });\r\n}\r\n\r\nexport async function signIn(params: SignInParams) {\r\n    const { email, idToken } = params;\r\n\r\n    try {\r\n        const userRecord = await auth.getUserByEmail(email);\r\n        if (!userRecord) {\r\n            return {\r\n                success: false,\r\n                message: \"User does not exist. Create an account.\",\r\n            };\r\n        }\r\n\r\n        await setSessionCookie(idToken);\r\n\r\n        return {\r\n            success: true,\r\n            message: \"Login successful\",\r\n        };\r\n    } catch (error: any) {\r\n        console.log(\"\", error);\r\n\r\n        return {\r\n            success: false,\r\n            message: \"Failed to log into account. Please try again.\",\r\n        };\r\n    }\r\n}\r\n\r\n// Sign out user by clearing the session cookie\r\nexport async function signOut() {\r\n    const cookieStore = await cookies();\r\n\r\n    cookieStore.delete(\"session\");\r\n}\r\n\r\n//Get current user from session cookie\r\nexport async function getCurrentUser() : Promise<User | null> {\r\n    const cookieStore = await cookies();\r\n\r\n    const sessionCookie = cookieStore.get(\"session\")?.value;\r\n    if (!sessionCookie) return null;\r\n\r\n    try {\r\n        const decodedClaims = await auth.verifySessionCookie(sessionCookie, true);\r\n        const userRecord = await db\r\n            .collection(\"users\")\r\n            .doc(decodedClaims.uid)\r\n            .get()\r\n\r\n        if (!userRecord) return null;\r\n\r\n        return {\r\n            ...userRecord.data(),\r\n            id: userRecord.id,\r\n        } as User;\r\n    } catch (err) {\r\n        console.log(err);\r\n\r\n        // Invalid or expired session\r\n        return null;\r\n    }\r\n}\r\n\r\n//Check if user is authenticated\r\nexport async function isAuthenticated(){\r\n    const user = await getCurrentUser();\r\n    return !!user;\r\n}\r\n\r\n"],"names":[],"mappings":";;;;;;;;;;;;;;;AAEA;AACA;;;;;;;;;AAEA,MAAM,WAAW,KAAK,KAAK,KAAK,GAAG,oBAAoB;AAEhD,eAAe,OAAO,MAAoB;IAC7C,MAAM,EAAE,GAAG,EAAE,IAAI,EAAE,KAAK,EAAE,GAAG;IAE7B,IAAI;QACA,MAAM,aAAa,MAAM,yHAAE,CAAC,UAAU,CAAC,SAAS,GAAG,CAAC,KAAK,GAAG;QAE5D,IAAI,WAAW,MAAM,EAAE;YACnB,OAAO;gBACH,SAAS;gBACT,SAAS;YACb;QACJ;QAEA,MAAM,yHAAE,CAAC,UAAU,CAAC,SAAS,GAAG,CAAC,KAAK,GAAG,CAAC;YACtC;YACA;QACJ;QAEA,OAAO;YACH,SAAS;YACT,SAAS;QACb;IACJ,EAAE,OAAO,GAAQ;QACb,QAAQ,KAAK,CAAC,uBAAuB;QAErC,IAAI,EAAE,IAAI,KAAK,6BAA6B;YACxC,OAAO;gBACH,SAAS;gBACT,SAAS;YACb;QACJ;QAEA,OAAO;YACH,SAAS;YACT,SAAS;QACb;IACJ;AACJ;AAEO,eAAe,iBAAiB,OAAe;IAClD,MAAM,cAAc,MAAM,IAAA,4IAAO;IAEjC,MAAM,gBAAgB,MAAM,2HAAI,CAAC,mBAAmB,CAAC,SAAS;QAC1D,WAAW,WAAW;IAC1B;IAEA,YAAY,GAAG,CAAC,WAAW,eAAe;QACtC,QAAQ;QACR,UAAU;QACV,QAAQ,oDAAyB;QACjC,MAAM;QACN,UAAU;IACd;AACJ;AAEO,eAAe,OAAO,MAAoB;IAC7C,MAAM,EAAE,KAAK,EAAE,OAAO,EAAE,GAAG;IAE3B,IAAI;QACA,MAAM,aAAa,MAAM,2HAAI,CAAC,cAAc,CAAC;QAC7C,IAAI,CAAC,YAAY;YACb,OAAO;gBACH,SAAS;gBACT,SAAS;YACb;QACJ;QAEA,MAAM,iBAAiB;QAEvB,OAAO;YACH,SAAS;YACT,SAAS;QACb;IACJ,EAAE,OAAO,OAAY;QACjB,QAAQ,GAAG,CAAC,IAAI;QAEhB,OAAO;YACH,SAAS;YACT,SAAS;QACb;IACJ;AACJ;AAGO,eAAe;IAClB,MAAM,cAAc,MAAM,IAAA,4IAAO;IAEjC,YAAY,MAAM,CAAC;AACvB;AAGO,eAAe;IAClB,MAAM,cAAc,MAAM,IAAA,4IAAO;IAEjC,MAAM,gBAAgB,YAAY,GAAG,CAAC,YAAY;IAClD,IAAI,CAAC,eAAe,OAAO;IAE3B,IAAI;QACA,MAAM,gBAAgB,MAAM,2HAAI,CAAC,mBAAmB,CAAC,eAAe;QACpE,MAAM,aAAa,MAAM,yHAAE,CACtB,UAAU,CAAC,SACX,GAAG,CAAC,cAAc,GAAG,EACrB,GAAG;QAER,IAAI,CAAC,YAAY,OAAO;QAExB,OAAO;YACH,GAAG,WAAW,IAAI,EAAE;YACpB,IAAI,WAAW,EAAE;QACrB;IACJ,EAAE,OAAO,KAAK;QACV,QAAQ,GAAG,CAAC;QAEZ,6BAA6B;QAC7B,OAAO;IACX;AACJ;AAGO,eAAe;IAClB,MAAM,OAAO,MAAM;IACnB,OAAO,CAAC,CAAC;AACb;;;IA1HsB;IAuCA;IAgBA;IA6BA;IAOA;IA4BA;;AAvHA,iPAAA;AAuCA,iPAAA;AAgBA,iPAAA;AA6BA,iPAAA;AAOA,iPAAA;AA4BA,iPAAA","debugId":null}},
    {"offset": {"line": 265, "column": 0}, "map": {"version":3,"sources":["file:///C:/Users/lenovo/OneDrive/Desktop/interview-platform/app/api/user/profile/route.ts"],"sourcesContent":["import { NextRequest, NextResponse } from \"next/server\";\r\nimport { getCurrentUser } from \"@/lib/actions/auth.action\";\r\nimport { db } from \"@/firebase/admin\";\r\n\r\nexport async function GET(req: NextRequest) {\r\n  const user = await getCurrentUser();\r\n  if (!user) {\r\n    return NextResponse.json({ error: \"Unauthorized\" }, { status: 401 });\r\n  }\r\n\r\n  const userDoc = await db.collection(\"users\").doc(user.id).get();\r\n  if (!userDoc.exists) {\r\n    return NextResponse.json({ error: \"User not found\" }, { status: 404 });\r\n  }\r\n  const userData = userDoc.data();\r\n\r\n  // Dossiers: either as array or subcollection\r\n  let dossiers = [];\r\n  if (userData?.dossiers) {\r\n    dossiers = userData.dossiers;\r\n  } else {\r\n    // Try to fetch from subcollection if not in main doc\r\n    const dossiersSnap = await db.collection(\"users\").doc(user.id).collection(\"dossiers\").get();\r\n    dossiers = dossiersSnap.docs.map(doc => ({ id: doc.id, ...doc.data() }));\r\n  }\r\n\r\n  return NextResponse.json({\r\n    ...userData,\r\n    id: user.id,\r\n    skills: userData?.skills || [],\r\n    dossiers: dossiers || [],\r\n  });\r\n}\r\n"],"names":[],"mappings":";;;;AAAA;AACA;AACA;;;;;;;;;AAEO,eAAe,IAAI,GAAgB;IACxC,MAAM,OAAO,MAAM,IAAA,oJAAc;IACjC,IAAI,CAAC,MAAM;QACT,OAAO,gJAAY,CAAC,IAAI,CAAC;YAAE,OAAO;QAAe,GAAG;YAAE,QAAQ;QAAI;IACpE;IAEA,MAAM,UAAU,MAAM,yHAAE,CAAC,UAAU,CAAC,SAAS,GAAG,CAAC,KAAK,EAAE,EAAE,GAAG;IAC7D,IAAI,CAAC,QAAQ,MAAM,EAAE;QACnB,OAAO,gJAAY,CAAC,IAAI,CAAC;YAAE,OAAO;QAAiB,GAAG;YAAE,QAAQ;QAAI;IACtE;IACA,MAAM,WAAW,QAAQ,IAAI;IAE7B,6CAA6C;IAC7C,IAAI,WAAW,EAAE;IACjB,IAAI,UAAU,UAAU;QACtB,WAAW,SAAS,QAAQ;IAC9B,OAAO;QACL,qDAAqD;QACrD,MAAM,eAAe,MAAM,yHAAE,CAAC,UAAU,CAAC,SAAS,GAAG,CAAC,KAAK,EAAE,EAAE,UAAU,CAAC,YAAY,GAAG;QACzF,WAAW,aAAa,IAAI,CAAC,GAAG,CAAC,CAAA,MAAO,CAAC;gBAAE,IAAI,IAAI,EAAE;gBAAE,GAAG,IAAI,IAAI,EAAE;YAAC,CAAC;IACxE;IAEA,OAAO,gJAAY,CAAC,IAAI,CAAC;QACvB,GAAG,QAAQ;QACX,IAAI,KAAK,EAAE;QACX,QAAQ,UAAU,UAAU,EAAE;QAC9B,UAAU,YAAY,EAAE;IAC1B;AACF","debugId":null}}]
}