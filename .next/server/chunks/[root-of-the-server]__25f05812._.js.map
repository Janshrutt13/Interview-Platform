{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 3, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"","debugId":null}},
    {"offset": {"line": 49, "column": 0}, "map": {"version":3,"sources":["file:///C:/Users/lenovo/OneDrive/Desktop/interview-platform/app/api/vapi/generate/route.ts"],"sourcesContent":["import { NextResponse } from \"next/server\";\r\n\r\n// This route proxies web call creation to Vapi. It supports either:\r\n// 1) { workflowId, variableValues }\r\n// 2) { assistant, variableValues }\r\n// and returns the response expected by vapi.start(...)\r\n\r\nexport async function GET() {\r\n    return NextResponse.json({ success: true, data: \"OK\" }, { status: 200 });\r\n}\r\n\r\nexport async function POST(request: Request) {\r\n    try {\r\n        const body = await request.json();\r\n\r\n        const apiKey = process.env.VAPI_API_KEY;\r\n        if (!apiKey) {\r\n            return NextResponse.json(\r\n                { success: false, error: \"Missing VAPI_API_KEY\" },\r\n                { status: 500 }\r\n            );\r\n        }\r\n\r\n        // Prefer explicit workflowId from request; otherwise fallback to server env\r\n        const workflowId = body.workflowId || process.env.VAPI_WORKFLOW_ID;\r\n        const assistant = body.assistant;\r\n        const variableValues = body.variableValues || {};\r\n\r\n        if (!workflowId && !assistant) {\r\n            return NextResponse.json(\r\n                { success: false, error: \"Provide either workflowId or assistant\" },\r\n                { status: 400 }\r\n            );\r\n        }\r\n\r\n        const payload: Record<string, any> = { variableValues };\r\n        if (workflowId) payload.workflowId = workflowId;\r\n        if (assistant) payload.assistant = assistant;\r\n\r\n        const res = await fetch(\"https://api.vapi.ai/call/web\", {\r\n            method: \"POST\",\r\n            headers: {\r\n                Authorization: `Bearer ${apiKey}`,\r\n                \"Content-Type\": \"application/json\",\r\n            },\r\n            body: JSON.stringify(payload),\r\n        });\r\n\r\n        // Attempt parsing response regardless of status to surface server-side errors from Vapi\r\n        const data = await res.json().catch(() => ({}));\r\n\r\n        if (!res.ok) {\r\n            return NextResponse.json(\r\n                { success: false, error: data?.error?.message || data?.message || \"Vapi call failed\" },\r\n                { status: res.status }\r\n            );\r\n        }\r\n\r\n        return NextResponse.json({ success: true, ...data }, { status: 200 });\r\n    } catch (err: any) {\r\n        return NextResponse.json(\r\n            { success: false, error: err?.message || String(err) },\r\n            { status: 500 }\r\n        );\r\n    }\r\n}\r\n"],"names":[],"mappings":";;;;;;AAAA;;AAOO,eAAe;IAClB,OAAO,gJAAY,CAAC,IAAI,CAAC;QAAE,SAAS;QAAM,MAAM;IAAK,GAAG;QAAE,QAAQ;IAAI;AAC1E;AAEO,eAAe,KAAK,OAAgB;IACvC,IAAI;QACA,MAAM,OAAO,MAAM,QAAQ,IAAI;QAE/B,MAAM,SAAS,QAAQ,GAAG,CAAC,YAAY;QACvC,IAAI,CAAC,QAAQ;YACT,OAAO,gJAAY,CAAC,IAAI,CACpB;gBAAE,SAAS;gBAAO,OAAO;YAAuB,GAChD;gBAAE,QAAQ;YAAI;QAEtB;QAEA,4EAA4E;QAC5E,MAAM,aAAa,KAAK,UAAU,IAAI,QAAQ,GAAG,CAAC,gBAAgB;QAClE,MAAM,YAAY,KAAK,SAAS;QAChC,MAAM,iBAAiB,KAAK,cAAc,IAAI,CAAC;QAE/C,IAAI,CAAC,cAAc,CAAC,WAAW;YAC3B,OAAO,gJAAY,CAAC,IAAI,CACpB;gBAAE,SAAS;gBAAO,OAAO;YAAyC,GAClE;gBAAE,QAAQ;YAAI;QAEtB;QAEA,MAAM,UAA+B;YAAE;QAAe;QACtD,IAAI,YAAY,QAAQ,UAAU,GAAG;QACrC,IAAI,WAAW,QAAQ,SAAS,GAAG;QAEnC,MAAM,MAAM,MAAM,MAAM,gCAAgC;YACpD,QAAQ;YACR,SAAS;gBACL,eAAe,CAAC,OAAO,EAAE,QAAQ;gBACjC,gBAAgB;YACpB;YACA,MAAM,KAAK,SAAS,CAAC;QACzB;QAEA,wFAAwF;QACxF,MAAM,OAAO,MAAM,IAAI,IAAI,GAAG,KAAK,CAAC,IAAM,CAAC,CAAC,CAAC;QAE7C,IAAI,CAAC,IAAI,EAAE,EAAE;YACT,OAAO,gJAAY,CAAC,IAAI,CACpB;gBAAE,SAAS;gBAAO,OAAO,MAAM,OAAO,WAAW,MAAM,WAAW;YAAmB,GACrF;gBAAE,QAAQ,IAAI,MAAM;YAAC;QAE7B;QAEA,OAAO,gJAAY,CAAC,IAAI,CAAC;YAAE,SAAS;YAAM,GAAG,IAAI;QAAC,GAAG;YAAE,QAAQ;QAAI;IACvE,EAAE,OAAO,KAAU;QACf,OAAO,gJAAY,CAAC,IAAI,CACpB;YAAE,SAAS;YAAO,OAAO,KAAK,WAAW,OAAO;QAAK,GACrD;YAAE,QAAQ;QAAI;IAEtB;AACJ","debugId":null}}]
}