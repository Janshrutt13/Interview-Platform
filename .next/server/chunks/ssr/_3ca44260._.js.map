{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 4, "column": 0}, "map": {"version":3,"sources":["file:///C:/Users/lenovo/OneDrive/Desktop/interview-platform/constants/index.ts"],"sourcesContent":["import {z} from \"zod\";\n\n\nexport const mappings = {\n  \"react.js\": \"react\",\n  reactjs: \"react\",\n  react: \"react\",\n  \"next.js\": \"nextjs\",\n  nextjs: \"nextjs\",\n  next: \"nextjs\",\n  \"vue.js\": \"vuejs\",\n  vuejs: \"vuejs\",\n  vue: \"vuejs\",\n  \"express.js\": \"express\",\n  expressjs: \"express\",\n  express: \"express\",\n  \"node.js\": \"nodejs\",\n  nodejs: \"nodejs\",\n  node: \"nodejs\",\n  mongodb: \"mongodb\",\n  mongo: \"mongodb\",\n  mongoose: \"mongoose\",\n  mysql: \"mysql\",\n  postgresql: \"postgresql\",\n  sqlite: \"sqlite\",\n  firebase: \"firebase\",\n  docker: \"docker\",\n  kubernetes: \"kubernetes\",\n  aws: \"aws\",\n  azure: \"azure\",\n  gcp: \"gcp\",\n  digitalocean: \"digitalocean\",\n  heroku: \"heroku\",\n  photoshop: \"photoshop\",\n  \"adobe photoshop\": \"photoshop\",\n  html5: \"html5\",\n  html: \"html5\",\n  css3: \"css3\",\n  css: \"css3\",\n  sass: \"sass\",\n  scss: \"sass\",\n  less: \"less\",\n  tailwindcss: \"tailwindcss\",\n  tailwind: \"tailwindcss\",\n  bootstrap: \"bootstrap\",\n  jquery: \"jquery\",\n  typescript: \"typescript\",\n  ts: \"typescript\",\n  javascript: \"javascript\",\n  js: \"javascript\",\n  \"angular.js\": \"angular\",\n  angularjs: \"angular\",\n  angular: \"angular\",\n  \"ember.js\": \"ember\",\n  emberjs: \"ember\",\n  ember: \"ember\",\n  \"backbone.js\": \"backbone\",\n  backbonejs: \"backbone\",\n  backbone: \"backbone\",\n  nestjs: \"nestjs\",\n  graphql: \"graphql\",\n  \"graph ql\": \"graphql\",\n  apollo: \"apollo\",\n  webpack: \"webpack\",\n  babel: \"babel\",\n  \"rollup.js\": \"rollup\",\n  rollupjs: \"rollup\",\n  rollup: \"rollup\",\n  \"parcel.js\": \"parcel\",\n  parceljs: \"parcel\",\n  npm: \"npm\",\n  yarn: \"yarn\",\n  git: \"git\",\n  github: \"github\",\n  gitlab: \"gitlab\",\n  bitbucket: \"bitbucket\",\n  figma: \"figma\",\n  prisma: \"prisma\",\n  redux: \"redux\",\n  flux: \"flux\",\n  redis: \"redis\",\n  selenium: \"selenium\",\n  cypress: \"cypress\",\n  jest: \"jest\",\n  mocha: \"mocha\",\n  chai: \"chai\",\n  karma: \"karma\",\n  vuex: \"vuex\",\n  \"nuxt.js\": \"nuxt\",\n  nuxtjs: \"nuxt\",\n  nuxt: \"nuxt\",\n  strapi: \"strapi\",\n  wordpress: \"wordpress\",\n  contentful: \"contentful\",\n  netlify: \"netlify\",\n  vercel: \"vercel\",\n  \"aws amplify\": \"amplify\",\n};\n\n\nexport const feedbackSchema = z.object({\n  totalScore: z.number(),\n  categoryScores: z.tuple([\n    z.object({\n      name: z.literal(\"Communication Skills\"),\n      score: z.number(),\n      comment: z.string(),\n    }),\n    z.object({\n      name: z.literal(\"Technical Knowledge\"),\n      score: z.number(),\n      comment: z.string(),\n    }),\n    z.object({\n      name: z.literal(\"Problem Solving\"),\n      score: z.number(),\n      comment: z.string(),\n    }),\n    z.object({\n      name: z.literal(\"Cultural Fit\"),\n      score: z.number(),\n      comment: z.string(),\n    }),\n    z.object({\n      name: z.literal(\"Confidence and Clarity\"),\n      score: z.number(),\n      comment: z.string(),\n    }),\n  ]),\n  strengths: z.array(z.string()),\n  areasForImprovement: z.array(z.string()),\n  finalAssessment: z.string(),\n});\n\n\nexport const interviewCovers = [\n  \"/adobe.png\",\n  \"/amazon.png\",\n  \"/facebook.png\",\n  \"/hostinger.png\",\n  \"/pinterest.png\",\n  \"/quora.png\",\n  \"/reddit.png\",\n  \"/skype.png\",\n  \"/spotify.png\",\n  \"/telegram.png\",\n  \"/tiktok.png\",\n  \"/yahoo.png\",\n];\n\n export const dummyInterviews: Interview[] = [\n   {\n    id: \"1\",\n     userId: \"user1\",\n     role: \"Frontend Developer\",\n    type: \"Technical\",\n     techstack: [\"React\", \"TypeScript\", \"Next.js\", \"Tailwind CSS\"],\n    level: \"Junior\",\n    questions: [\"What is React?\"],\n    finalized: false,\n    createdAt: \"2024-03-15T10:00:00Z\",\n   },\n   {\n    id: \"2\",\n    userId: \"user1\",\n    role: \"Full Stack Developer\",\n     type: \"Mixed\",\n    techstack: [\"Node.js\", \"Express\", \"MongoDB\", \"React\"],\n    level: \"Senior\",\n    questions: [\"What is Node.js?\"],\n     finalized: false,\n    createdAt: \"2024-03-14T15:30:00Z\",\n  },\n ];"],"names":[],"mappings":"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","debugId":null}},
    {"offset": {"line": 200, "column": 0}, "map": {"version":3,"sources":["file:///C:/Users/lenovo/OneDrive/Desktop/interview-platform/lib/utils.ts"],"sourcesContent":["import { interviewCovers, mappings } from \"@/constants\";\nimport { clsx, type ClassValue } from \"clsx\";\nimport { twMerge } from \"tailwind-merge\";\n\nexport function cn(...inputs: ClassValue[]) {\n  return twMerge(clsx(inputs));\n}\n\nconst techIconBaseURL = \"https://cdn.jsdelivr.net/gh/devicons/devicon/icons\";\n\nconst normalizeTechName = (tech: string) => {\n  const key = tech.toLowerCase().replace(/\\.js$/, \"\").replace(/\\s+/g, \"\");\n  return mappings[key as keyof typeof mappings];\n};\n\nconst checkIconExists = async (url: string) => {\n  try {\n    const response = await fetch(url, { method: \"HEAD\" });\n    return response.ok; // Returns true if the icon exists\n  } catch {\n    return false;\n  }\n};\n\nexport const getTechLogos = async (techArray: string[]) => {\n  const logoURLs = techArray.map((tech) => {\n    const normalized = normalizeTechName(tech);\n    return {\n      tech,\n      url: `${techIconBaseURL}/${normalized}/${normalized}-original.svg`,\n    };\n  });\n\n  const results = await Promise.all(\n      logoURLs.map(async ({ tech, url }) => ({\n        tech,\n        url: (await checkIconExists(url)) ? url : \"/tech.svg\",\n      }))\n  );\n\n  return results;\n};\n\nexport const getRandomInterviewCover = () => {\n  const randomIndex = Math.floor(Math.random() * interviewCovers.length);\n  return `/covers${interviewCovers[randomIndex]}`;\n};\n"],"names":[],"mappings":";;;;;;;;AAAA;AACA;AACA;;;;AAEO,SAAS,GAAG,GAAG,MAAoB;IACxC,OAAO,IAAA,sKAAO,EAAC,IAAA,6IAAI,EAAC;AACtB;AAEA,MAAM,kBAAkB;AAExB,MAAM,oBAAoB,CAAC;IACzB,MAAM,MAAM,KAAK,WAAW,GAAG,OAAO,CAAC,SAAS,IAAI,OAAO,CAAC,QAAQ;IACpE,OAAO,8HAAQ,CAAC,IAA6B;AAC/C;AAEA,MAAM,kBAAkB,OAAO;IAC7B,IAAI;QACF,MAAM,WAAW,MAAM,MAAM,KAAK;YAAE,QAAQ;QAAO;QACnD,OAAO,SAAS,EAAE,EAAE,kCAAkC;IACxD,EAAE,OAAM;QACN,OAAO;IACT;AACF;AAEO,MAAM,eAAe,OAAO;IACjC,MAAM,WAAW,UAAU,GAAG,CAAC,CAAC;QAC9B,MAAM,aAAa,kBAAkB;QACrC,OAAO;YACL;YACA,KAAK,GAAG,gBAAgB,CAAC,EAAE,WAAW,CAAC,EAAE,WAAW,aAAa,CAAC;QACpE;IACF;IAEA,MAAM,UAAU,MAAM,QAAQ,GAAG,CAC7B,SAAS,GAAG,CAAC,OAAO,EAAE,IAAI,EAAE,GAAG,EAAE,GAAK,CAAC;YACrC;YACA,KAAK,AAAC,MAAM,gBAAgB,OAAQ,MAAM;QAC5C,CAAC;IAGL,OAAO;AACT;AAEO,MAAM,0BAA0B;IACrC,MAAM,cAAc,KAAK,KAAK,CAAC,KAAK,MAAM,KAAK,qIAAe,CAAC,MAAM;IACrE,OAAO,CAAC,OAAO,EAAE,qIAAe,CAAC,YAAY,EAAE;AACjD","debugId":null}},
    {"offset": {"line": 254, "column": 0}, "map": {"version":3,"sources":["file:///C:/Users/lenovo/OneDrive/Desktop/interview-platform/components/ui/button.tsx"],"sourcesContent":["import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst buttonVariants = cva(\n  \"inline-flex items-center justify-center gap-2 whitespace-nowrap rounded-md text-sm font-medium transition-all disabled:pointer-events-none disabled:opacity-50 [&_svg]:pointer-events-none [&_svg:not([class*='size-'])]:size-4 shrink-0 [&_svg]:shrink-0 outline-none focus-visible:border-ring focus-visible:ring-ring/50 focus-visible:ring-[3px] aria-invalid:ring-destructive/20 dark:aria-invalid:ring-destructive/40 aria-invalid:border-destructive\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-primary text-primary-foreground hover:bg-primary/90\",\n        destructive:\n          \"bg-destructive text-white hover:bg-destructive/90 focus-visible:ring-destructive/20 dark:focus-visible:ring-destructive/40 dark:bg-destructive/60\",\n        outline:\n          \"border bg-background shadow-xs hover:bg-accent hover:text-accent-foreground dark:bg-input/30 dark:border-input dark:hover:bg-input/50\",\n        secondary:\n          \"bg-secondary text-secondary-foreground hover:bg-secondary/80\",\n        ghost:\n          \"hover:bg-accent hover:text-accent-foreground dark:hover:bg-accent/50\",\n        link: \"text-primary underline-offset-4 hover:underline\",\n      },\n      size: {\n        default: \"h-9 px-4 py-2 has-[>svg]:px-3\",\n        sm: \"h-8 rounded-md gap-1.5 px-3 has-[>svg]:px-2.5\",\n        lg: \"h-10 rounded-md px-6 has-[>svg]:px-4\",\n        icon: \"size-9\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nfunction Button({\n  className,\n  variant,\n  size,\n  asChild = false,\n  ...props\n}: React.ComponentProps<\"button\"> &\n  VariantProps<typeof buttonVariants> & {\n    asChild?: boolean\n  }) {\n  const Comp = asChild ? Slot : \"button\"\n\n  return (\n    <Comp\n      data-slot=\"button\"\n      className={cn(buttonVariants({ variant, size, className }))}\n      {...props}\n    />\n  )\n}\n\nexport { Button, buttonVariants }\n"],"names":[],"mappings":";;;;;;;AACA;AACA;AAEA;;;;;AAEA,MAAM,iBAAiB,IAAA,uKAAG,EACxB,+bACA;IACE,UAAU;QACR,SAAS;YACP,SAAS;YACT,aACE;YACF,SACE;YACF,WACE;YACF,OACE;YACF,MAAM;QACR;QACA,MAAM;YACJ,SAAS;YACT,IAAI;YACJ,IAAI;YACJ,MAAM;QACR;IACF;IACA,iBAAiB;QACf,SAAS;QACT,MAAM;IACR;AACF;AAGF,SAAS,OAAO,EACd,SAAS,EACT,OAAO,EACP,IAAI,EACJ,UAAU,KAAK,EACf,GAAG,OAIF;IACD,MAAM,OAAO,UAAU,wKAAI,GAAG;IAE9B,qBACE,8OAAC;QACC,aAAU;QACV,WAAW,IAAA,kHAAE,EAAC,eAAe;YAAE;YAAS;YAAM;QAAU;QACvD,GAAG,KAAK;;;;;;AAGf","debugId":null}},
    {"offset": {"line": 311, "column": 0}, "map": {"version":3,"sources":["file:///C:/Users/lenovo/OneDrive/Desktop/interview-platform/components/ui/input.tsx"],"sourcesContent":["import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nfunction Input({ className, type, ...props }: React.ComponentProps<\"input\">) {\n  return (\n    <input\n      type={type}\n      data-slot=\"input\"\n      className={cn(\n        \"file:text-foreground placeholder:text-muted-foreground selection:bg-primary selection:text-primary-foreground dark:bg-input/30 border-input h-9 w-full min-w-0 rounded-md border bg-transparent px-3 py-1 text-base shadow-xs transition-[color,box-shadow] outline-none file:inline-flex file:h-7 file:border-0 file:bg-transparent file:text-sm file:font-medium disabled:pointer-events-none disabled:cursor-not-allowed disabled:opacity-50 md:text-sm\",\n        \"focus-visible:border-ring focus-visible:ring-ring/50 focus-visible:ring-[3px]\",\n        \"aria-invalid:ring-destructive/20 dark:aria-invalid:ring-destructive/40 aria-invalid:border-destructive\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nexport { Input }\n"],"names":[],"mappings":";;;;;AAEA;;;AAEA,SAAS,MAAM,EAAE,SAAS,EAAE,IAAI,EAAE,GAAG,OAAsC;IACzE,qBACE,8OAAC;QACC,MAAM;QACN,aAAU;QACV,WAAW,IAAA,kHAAE,EACX,8bACA,iFACA,0GACA;QAED,GAAG,KAAK;;;;;;AAGf","debugId":null}},
    {"offset": {"line": 336, "column": 0}, "map": {"version":3,"sources":["file:///C:/Users/lenovo/OneDrive/Desktop/interview-platform/components/ui/label.tsx"],"sourcesContent":["\"use client\"\n\nimport * as React from \"react\"\nimport * as LabelPrimitive from \"@radix-ui/react-label\"\n\nimport { cn } from \"@/lib/utils\"\n\nfunction Label({\n  className,\n  ...props\n}: React.ComponentProps<typeof LabelPrimitive.Root>) {\n  return (\n    <LabelPrimitive.Root\n      data-slot=\"label\"\n      className={cn(\n        \"flex items-center gap-2 text-sm leading-none font-medium select-none group-data-[disabled=true]:pointer-events-none group-data-[disabled=true]:opacity-50 peer-disabled:cursor-not-allowed peer-disabled:opacity-50\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nexport { Label }\n"],"names":[],"mappings":";;;;;AAGA;AAEA;AALA;;;;AAOA,SAAS,MAAM,EACb,SAAS,EACT,GAAG,OAC8C;IACjD,qBACE,8OAAC,yKAAmB;QAClB,aAAU;QACV,WAAW,IAAA,kHAAE,EACX,uNACA;QAED,GAAG,KAAK;;;;;;AAGf","debugId":null}},
    {"offset": {"line": 363, "column": 0}, "map": {"version":3,"sources":["file:///C:/Users/lenovo/OneDrive/Desktop/interview-platform/lib/actions/general.action.ts"],"sourcesContent":["\"use server\";\r\n\r\nimport { generateText } from \"ai\";\r\nimport { google } from \"@ai-sdk/google\";\r\n\r\nexport async function generateInterviewDossier(params: GenerateInterviewDossierParams) {\r\n    const { jobDescription, resume, companyName, concerns, isAxonMode = false } = params;\r\n\r\n    // Validate inputs\r\n    if (!jobDescription || !resume || !companyName) {\r\n        return { success: false, error: \"Missing required fields: jobDescription, resume, or companyName\" };\r\n    }\r\n\r\n    try {\r\n        console.log(\"Generating interview dossier with inputs:\", {\r\n            companyName,\r\n            jobDescriptionLength: jobDescription.length,\r\n            resumeLength: resume.length,\r\n            concernsLength: concerns.length\r\n        });\r\n\r\n        const prompt = isAxonMode ? `\r\nYou are AXON, an elite AI interview strategist. Your function is to generate a hyper-personalized, data-driven \"Interview Briefing.\"\r\n\r\nYour entire output must be in Markdown and strictly follow the structure below using the specified delimiters and formatting. Do not add any conversational text outside of this structure.\r\n\r\n<--BEGIN BRIEFING-->\r\n\r\n<--SECTION: HEADER-->\r\n# Interview Briefing: [Job Title] at ${companyName}\r\n**Synergy Score:** [Generate a numerical percentage score from 1-100 representing the match between the resume and job description, e.g., 85%]\r\n\r\n<--SECTION: SNAPSHOT-->\r\n## 🚀 Strategic Snapshot\r\n[In 3 bullet points, summarize the candidate's most compelling selling points. Frame them as \"strategic assets.\"]\r\n* **Strategic Asset 1:** ...\r\n* **Strategic Asset 2:** ...\r\n* **Strategic Asset 3:** ...\r\n\r\n<--SECTION: SKILL_ANALYSIS-->\r\n## 📊 Skill Synergy Analysis\r\n[Identify the top 5 most important skills from the job description. For each, rate the candidate's experience from their resume on a scale of 1-5. Provide a brief justification.]\r\n* **[Skill Name 1]:** [Rating/5] - *Justification...*\r\n* **[Skill Name 2]:** [Rating/5] - *Justification...*\r\n* **[Skill Name 3]:** [Rating/5] - *Justification...*\r\n* **[Skill Name 4]:** [Rating/5] - *Justification...*\r\n* **[Skill Name 5]:** [Rating/5] - *Justification...*\r\n\r\n<--SECTION: QUESTIONS-->\r\n## 💡 Intelligent Questions\r\n[Generate 8 questions. For EACH question, provide a rationale and at least one tag from this list: #Culture, #Technical, #Growth, #Strategy, #Logistics. Format each as a block.]\r\n\r\n**Question:** \"What does the onboarding process look like for this role, and what are the key milestones for the first 90 days?\"\r\n**Rationale:** This shows you are forward-thinking and focused on hitting the ground running effectively.\r\n**Tags:** #Logistics #Growth\r\n\r\n**Question:** \"How does the team handle collaboration on complex projects, especially when there are differing technical opinions?\"\r\n**Rationale:** This helps you understand the team's dynamic, communication style, and conflict resolution process.\r\n**Tags:** #Culture #Technical\r\n\r\n[...generate 6 more questions following this exact format...]\r\n\r\n<--SECTION: RED_FLAG_RADAR-->\r\n## 🚩 Red Flag Radar\r\n[Identify 1-2 potential gaps or concerns. For each, provide a \"Proactive Reframe\" strategy.]\r\n* **Potential Flag:** [Describe the gap, e.g., \"Lack of direct experience with Python.\"]\r\n    * **Proactive Reframe:** [Provide a strategy, e.g., \"Highlight your rapid learning ability by mentioning how you quickly mastered Java for the X project, and state your enthusiasm for applying that skill to Python.\"].\r\n\r\n<--END BRIEFING-->\r\n\r\n**INPUTS:**\r\nJob Description: ${jobDescription}\r\nResume: ${resume}\r\nCompany: ${companyName}\r\nConcerns: ${concerns}\r\n        ` : `\r\nYou are \"Interview Strategist AI,\" an expert career coach. Your task is to generate a personalized \"Interview Dossier\" based on the user's data.\r\n\r\nThe output must be in clean, well-formatted Markdown. Use \\`###\\` for each section title. Do not add any conversational intro or outro.\r\n\r\n---\r\n\r\n### 🚀 Your Key Selling Points\r\nAnalyze the resume against the job description. In 3-4 bullet points, summarize the user's strongest qualifications that make them an excellent fit.\r\n\r\n### 🎯 Strategic Questions to Ask\r\nGenerate 8 insightful questions. For EACH question, add a brief \"Rationale\" in italics. Organize them into these categories using bold titles:\r\n**About the Role & Success**\r\n**About the Team & Culture**\r\n**About Company Strategy**\r\n\r\n### 🚩 Potential Gaps to Prepare For\r\nIdentify 1-2 potential gaps between the resume and the job description. For each, suggest a brief, proactive way to address it.\r\n\r\n### ⭐ Your Powerful Closing Statement\r\nCraft a concise, powerful closing statement template (2-3 sentences) that the user can adapt to end the interview on a high note.\r\n\r\n---\r\n**INPUTS:**\r\nJob Description: ${jobDescription}\r\nResume: ${resume}\r\nCompany: ${companyName}\r\nConcerns: ${concerns}\r\n        `;\r\n\r\n        const systemPrompt = isAxonMode \r\n            ? \"You are AXON, an elite AI interview strategist. Generate hyper-personalized, data-driven interview briefings with exact formatting and delimiters as specified.\"\r\n            : \"You are an expert career coach and interview strategist. Generate comprehensive, actionable interview preparation materials in clean Markdown format.\";\r\n\r\n        const { text } = await generateText({\r\n            model: google(\"gemini-2.0-flash-001\"),\r\n            prompt,\r\n            system: systemPrompt,\r\n        });\r\n\r\n        console.log(\"Generated text length:\", text?.length || 0);\r\n        console.log(\"Generated text preview:\", text?.substring(0, 200) || \"No text generated\");\r\n\r\n        if (!text || text.trim().length === 0) {\r\n            return { success: false, error: \"AI generated empty response\" };\r\n        }\r\n\r\n        return { success: true, dossier: text };\r\n    } catch (error) {\r\n        console.error(\"Error generating interview dossier:\", error);\r\n        return { success: false, error: `Failed to generate interview dossier: ${error instanceof Error ? error.message : 'Unknown error'}` };\r\n    }\r\n}\r\n\r\nexport async function generateChatResponse(params: {\r\n    interviewBriefing: string;\r\n    conversationHistory: Array<{ role: string; content: string; timestamp: Date }>;\r\n    userMessage: string;\r\n}) {\r\n    const { interviewBriefing, conversationHistory, userMessage } = params;\r\n\r\n    try {\r\n        // Format conversation history\r\n        const formattedHistory = conversationHistory\r\n            .map(msg => `${msg.role === \"user\" ? \"User\" : \"Coach\"}: ${msg.content}`)\r\n            .join(\"\\n\");\r\n\r\n        const { text } = await generateText({\r\n            model: google(\"gemini-2.0-flash-001\"),\r\n            prompt: `\r\n**ROLE & GOAL**\r\nYou are an AI Interview Coach, an expert assistant to the main \"AXON\" strategist. Your name is \"Coach.\" Your primary goal is to help a job candidate understand, expand upon, and practice with the specific \"Interview Briefing\" they have already generated. You must be encouraging, concise, and professional.\r\n\r\n**CONTEXT**\r\nYou will be given the complete [INTERVIEW BRIEFING] and the ongoing [CONVERSATION HISTORY]. All of your responses MUST be based on this context.\r\n\r\n**CAPABILITIES (What you CAN do):**\r\n\r\n1.  **Clarify Concepts:** If the user asks about an interview term (e.g., \"What is the STAR method?\"), provide a clear, concise definition.\r\n2.  **Generate More Questions:** If the user asks for more questions about a specific topic (e.g., \"Can you give me another question about team culture?\"), generate 1-2 relevant, insightful questions.\r\n3.  **Role-Play & Practice:** If the user says \"Let's practice\" or \"Ask me a question,\" you will act as the interviewer.\r\n    * Pick one of the insightful questions from the briefing.\r\n    * Ask it clearly.\r\n    * After the user provides their answer, give them brief, constructive feedback based on the STAR method (Situation, Task, Action, Result). The feedback should be encouraging.\r\n4.  **Company Research (Simulated):** If the user asks for more information about the company, provide a brief, professional summary as if you had just done a quick web search. Preface your answer with \"Based on publicly available information...\"\r\n5.  **Rephrasing & Tone:** If the user asks for help rephrasing a question or an answer, provide a better alternative, explaining why it's more effective.\r\n\r\n**RULES & CONSTRAINTS (What you CANNOT do):**\r\n\r\n* **DO NOT** invent facts about the company.\r\n* **DO NOT** answer questions outside the scope of interview preparation. If asked, gracefully respond with: \"My expertise is focused on helping you prepare for this interview. How about we practice one of the questions from your briefing?\"\r\n* **ALWAYS** be concise. Use bullet points and short paragraphs.\r\n\r\n---\r\n**INPUTS:**\r\n\r\n**[INTERVIEW BRIEFING]:**\r\n${interviewBriefing || \"No interview briefing available yet. Please generate one first.\"}\r\n\r\n**[CONVERSATION HISTORY]:**\r\n${formattedHistory}\r\n\r\n**[USER'S NEWEST MESSAGE]:**\r\n${userMessage}\r\n            `,\r\n            system: \"You are Coach, an AI Interview Coach. Be encouraging, concise, and professional. Focus only on interview preparation and practice.\",\r\n        });\r\n\r\n        if (!text || text.trim().length === 0) {\r\n            return { success: false, error: \"AI generated empty response\" };\r\n        }\r\n\r\n        return { success: true, message: text };\r\n    } catch (error) {\r\n        console.error(\"Error generating chat response:\", error);\r\n        return { success: false, error: `Failed to generate chat response: ${error instanceof Error ? error.message : 'Unknown error'}` };\r\n    }\r\n}\r\n\r\n"],"names":[],"mappings":";;;;;;;IAKsB,2BAAA,WAAA,GAAA,IAAA,+OAAA,EAAA,8CAAA,oOAAA,EAAA,KAAA,GAAA,0OAAA,EAAA","debugId":null}},
    {"offset": {"line": 375, "column": 0}, "map": {"version":3,"sources":["file:///C:/Users/lenovo/OneDrive/Desktop/interview-platform/components/InterviewStrategist.tsx"],"sourcesContent":["\"use client\";\r\n\r\nimport { useState } from \"react\";\r\nimport { Button } from \"@/components/ui/button\";\r\nimport { Input } from \"@/components/ui/input\";\r\nimport { Label } from \"@/components/ui/label\";\r\nimport { generateInterviewDossier } from \"@/lib/actions/general.action\";\r\n\r\ninterface InterviewStrategistProps {\r\n  userName: string;\r\n  userId: string;\r\n}\r\n\r\nexport default function InterviewStrategist({ userName, userId }: InterviewStrategistProps) {\r\n  const [formData, setFormData] = useState({\r\n    jobDescription: \"\",\r\n    resume: \"\",\r\n    companyName: \"\",\r\n    concerns: \"\"\r\n  });\r\n  const [isGenerating, setIsGenerating] = useState(false);\r\n  const [dossier, setDossier] = useState<string>(\"\");\r\n  const [error, setError] = useState<string>(\"\");\r\n  const [isAxonMode, setIsAxonMode] = useState(false);\r\n\r\n  const handleInputChange = (field: string, value: string) => {\r\n    setFormData(prev => ({\r\n      ...prev,\r\n      [field]: value\r\n    }));\r\n  };\r\n\r\n  const handleGenerate = async () => {\r\n    if (!formData.jobDescription || !formData.resume || !formData.companyName) {\r\n      setError(\"Please fill in all required fields (Job Description, Resume, Company Name)\");\r\n      return;\r\n    }\r\n\r\n    setIsGenerating(true);\r\n    setError(\"\");\r\n    try {\r\n      const result = await generateInterviewDossier({\r\n        jobDescription: formData.jobDescription,\r\n        resume: formData.resume,\r\n        companyName: formData.companyName,\r\n        concerns: formData.concerns,\r\n        userId,\r\n        isAxonMode\r\n      });\r\n\r\n      if (result.success && result.dossier) {\r\n        console.log(\"Setting dossier:\", result.dossier.substring(0, 200));\r\n        setDossier(result.dossier);\r\n        setError(\"\");\r\n      } else {\r\n        console.log(\"Error result:\", result);\r\n        setError(result.error || \"Failed to generate interview dossier. Please try again.\");\r\n      }\r\n    } catch (error) {\r\n      console.error(\"Error generating dossier:\", error);\r\n      setError(\"An error occurred while generating the dossier.\");\r\n    } finally {\r\n      setIsGenerating(false);\r\n    }\r\n  };\r\n\r\n  const handleCopyToClipboard = () => {\r\n    navigator.clipboard.writeText(dossier);\r\n    alert(\"Dossier copied to clipboard!\");\r\n  };\r\n\r\n  console.log(\"Component render - dossier:\", dossier?.length || 0, \"isGenerating:\", isGenerating);\r\n\r\n  return (\r\n    <div className=\"max-w-4xl mx-auto p-6 space-y-6\">\r\n      <div className=\"text-center space-y-2\">\r\n        <h1 className=\"text-3xl font-bold\">\r\n          {isAxonMode ? \"AXON Interview Strategist\" : \"Interview Strategist AI\"}\r\n        </h1>\r\n        <p className=\"text-gray-600\">\r\n          {isAxonMode \r\n            ? \"Generate your hyper-personalized Interview Briefing\" \r\n            : \"Generate your personalized Interview Dossier\"\r\n          }\r\n        </p>\r\n        \r\n        <div className=\"flex justify-center mt-4\">\r\n          <div className=\"bg-gray-100 rounded-lg p-1 flex\">\r\n            <button\r\n              onClick={() => setIsAxonMode(false)}\r\n              className={`px-4 py-2 rounded-md text-sm font-medium transition-colors ${\r\n                !isAxonMode \r\n                  ? \"bg-white text-gray-900 shadow-sm\" \r\n                  : \"text-gray-600 hover:text-gray-900\"\r\n              }`}\r\n            >\r\n              Phase 1: Dossier\r\n            </button>\r\n            <button\r\n              onClick={() => setIsAxonMode(true)}\r\n              className={`px-4 py-2 rounded-md text-sm font-medium transition-colors ${\r\n                isAxonMode \r\n                  ? \"bg-white text-gray-900 shadow-sm\" \r\n                  : \"text-gray-600 hover:text-gray-900\"\r\n              }`}\r\n            >\r\n              Phase 2: AXON\r\n            </button>\r\n          </div>\r\n        </div>\r\n      </div>\r\n\r\n      {!dossier ? (\r\n        <div className=\"space-y-6\">\r\n          <div className=\"grid grid-cols-1 md:grid-cols-2 gap-6\">\r\n            <div className=\"space-y-2\">\r\n              <Label htmlFor=\"companyName\">Company Name *</Label>\r\n              <Input\r\n                id=\"companyName\"\r\n                value={formData.companyName}\r\n                onChange={(e) => handleInputChange(\"companyName\", e.target.value)}\r\n                placeholder=\"e.g., Google, Microsoft, Amazon\"\r\n              />\r\n            </div>\r\n            <div className=\"space-y-2\">\r\n              <Label htmlFor=\"concerns\">Your Concerns (Optional)</Label>\r\n              <Input\r\n                id=\"concerns\"\r\n                value={formData.concerns}\r\n                onChange={(e) => handleInputChange(\"concerns\", e.target.value)}\r\n                placeholder=\"e.g., Lack of experience with React, nervous about technical questions\"\r\n              />\r\n            </div>\r\n          </div>\r\n\r\n          <div className=\"space-y-2\">\r\n            <Label htmlFor=\"jobDescription\">Job Description *</Label>\r\n            <textarea\r\n              id=\"jobDescription\"\r\n              value={formData.jobDescription}\r\n              onChange={(e) => handleInputChange(\"jobDescription\", e.target.value)}\r\n              placeholder=\"Paste the complete job description here...\"\r\n              className=\"w-full h-40 p-3 border border-gray-300 rounded-md resize-vertical\"\r\n            />\r\n          </div>\r\n\r\n          <div className=\"space-y-2\">\r\n            <Label htmlFor=\"resume\">Your Resume *</Label>\r\n            <textarea\r\n              id=\"resume\"\r\n              value={formData.resume}\r\n              onChange={(e) => handleInputChange(\"resume\", e.target.value)}\r\n              placeholder=\"Paste your resume content here...\"\r\n              className=\"w-full h-40 p-3 border border-gray-300 rounded-md resize-vertical\"\r\n            />\r\n          </div>\r\n\r\n          <Button \r\n            onClick={handleGenerate} \r\n            disabled={isGenerating}\r\n            className=\"w-full\"\r\n          >\r\n            {isGenerating \r\n              ? (isAxonMode ? \"Generating AXON Briefing...\" : \"Generating Dossier...\") \r\n              : (isAxonMode ? \"Generate AXON Briefing\" : \"Generate Interview Dossier\")\r\n            }\r\n          </Button>\r\n\r\n          {error && (\r\n            <div className=\"bg-red-50 border border-red-200 rounded-md p-4\">\r\n              <p className=\"text-red-800 text-sm\">{error}</p>\r\n            </div>\r\n          )}\r\n        </div>\r\n      ) : (\r\n        <div className=\"space-y-4\">\r\n          <div className=\"flex justify-between items-center\">\r\n            <h2 className=\"text-2xl font-bold\">\r\n              {isAxonMode ? \"AXON Interview Briefing\" : \"Your Interview Dossier\"}\r\n            </h2>\r\n            <Button onClick={handleCopyToClipboard} variant=\"outline\">\r\n              Copy to Clipboard\r\n            </Button>\r\n          </div>\r\n          \r\n          <div className=\"bg-white border border-gray-200 p-6 rounded-lg shadow-sm\">\r\n            <pre className=\"whitespace-pre-wrap text-sm text-gray-800 leading-relaxed\">\r\n              {dossier || \"No content to display\"}\r\n            </pre>\r\n            <div className=\"mt-2 text-xs text-gray-500\">\r\n              Content length: {dossier?.length || 0} characters\r\n            </div>\r\n          </div>\r\n\r\n          <Button \r\n            onClick={() => {\r\n              setDossier(\"\");\r\n              setError(\"\");\r\n              setFormData({\r\n                jobDescription: \"\",\r\n                resume: \"\",\r\n                companyName: \"\",\r\n                concerns: \"\"\r\n              });\r\n            }}\r\n            variant=\"outline\"\r\n            className=\"w-full\"\r\n          >\r\n            {isAxonMode ? \"Generate New Briefing\" : \"Generate New Dossier\"}\r\n          </Button>\r\n        </div>\r\n      )}\r\n    </div>\r\n  );\r\n}\r\n"],"names":[],"mappings":"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","debugId":null}}]
}