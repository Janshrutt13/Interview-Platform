{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 36, "column": 0}, "map": {"version":3,"sources":["file:///C:/Users/lenovo/OneDrive/Desktop/interview-platform/firebase/admin.ts"],"sourcesContent":["import {initializeApp , cert , getApps} from \"firebase-admin/app\";\r\nimport {getAuth} from \"firebase-admin/auth\";\r\nimport {getFirestore} from \"firebase-admin/firestore\";\r\n\r\nconst initFirebaseAdmin = () => {\r\n    const apps = getApps();\r\n\r\n    if(!apps.length){\r\n        initializeApp({\r\n            credential : cert({\r\n                projectId : process.env.FIREBASE_PROJECT_ID,\r\n                clientEmail : process.env.FIREBASE_CLIENT_EMAIL,\r\n                privateKey : process.env.FIREBASE_PRIVATE_KEY?.replace(/\\\\n/g, \"\\n\"),\r\n            }),\r\n        });\r\n    }\r\n\r\n\r\n    return {\r\n        auth : getAuth(),\r\n        db : getFirestore(),\r\n    }\r\n}\r\n\r\nexport const {db: adminDb, auth} = initFirebaseAdmin()"],"names":[],"mappings":";;;;;;AAAA;AACA;AACA;;;;;;;;;;AAEA,MAAM,oBAAoB;IACtB,MAAM,OAAO,IAAA,2JAAO;IAEpB,IAAG,CAAC,KAAK,MAAM,EAAC;QACZ,IAAA,iKAAa,EAAC;YACV,YAAa,IAAA,wJAAI,EAAC;gBACd,WAAY,QAAQ,GAAG,CAAC,mBAAmB;gBAC3C,aAAc,QAAQ,GAAG,CAAC,qBAAqB;gBAC/C,YAAa,QAAQ,GAAG,CAAC,oBAAoB,EAAE,QAAQ,QAAQ;YACnE;QACJ;IACJ;IAGA,OAAO;QACH,MAAO,IAAA,6JAAO;QACd,IAAK,IAAA,4KAAY;IACrB;AACJ;AAEO,MAAM,EAAC,IAAI,OAAO,EAAE,IAAI,EAAC,GAAG","debugId":null}},
    {"offset": {"line": 78, "column": 0}, "map": {"version":3,"sources":["file:///C:/Users/lenovo/OneDrive/Desktop/interview-platform/lib/actions/axon.action.ts"],"sourcesContent":["\"use server\";\r\n\r\nimport { generateText } from \"ai\";\r\nimport { google } from \"@ai-sdk/google\";\r\nimport { adminDb } from \"@/firebase/admin\";\r\n\r\n// -------------------- START AXON SESSION --------------------\r\nexport async function startAxonSession(params: StartAxonSessionParams) {\r\n  const { userId, jobRole, experience, sessionType, questionType = 'mixed', numberOfQuestions = 5 } = params;\r\n\r\n  try {\r\n    const { text: questionsText } = await generateText({\r\n      model: google(\"gemini-2.0-flash-001\"),\r\n      system: \"Generate interview questions as JSON array only.\",\r\n      prompt: `Generate ${numberOfQuestions} ${questionType} interview questions for ${jobRole}. Return ONLY a JSON array like: [\"Question 1\", \"Question 2\", \"Question 3\"]`\r\n    });\r\n\r\n    let questions: string[];\r\n    try {\r\n      // Clean the response to extract JSON\r\n      let cleanText = questionsText.trim();\r\n      if (cleanText.includes('```')) {\r\n        cleanText = cleanText.replace(/```json?/g, '').replace(/```/g, '').trim();\r\n      }\r\n      questions = JSON.parse(cleanText);\r\n    } catch {\r\n      // Use simple fallback questions\r\n      questions = [\r\n        \"Tell me about yourself.\",\r\n        \"Why are you interested in this role?\",\r\n        \"What are your strengths?\",\r\n        \"Describe a challenge you faced.\",\r\n        \"Where do you see yourself in 5 years?\"\r\n      ].slice(0, numberOfQuestions);\r\n    }\r\n\r\n    const sessionId = `axon_${Date.now()}_${userId}`;\r\n    const sessionData = {\r\n      sessionId,\r\n      userId,\r\n      jobRole,\r\n      experience,\r\n      sessionType,\r\n      questions,\r\n      currentQuestionIndex: 0,\r\n      startTime: new Date(),\r\n      status: \"active\",\r\n      responses: []\r\n    };\r\n\r\n    await adminDb.collection(\"axon_sessions\").doc(sessionId).set(sessionData);\r\n\r\n    return {\r\n      success: true,\r\n      session: {\r\n        sessionId,\r\n        currentQuestion: questions[0],\r\n        questionIndex: 0,\r\n        totalQuestions: questions.length,\r\n        startTime: new Date().toISOString()\r\n      }\r\n    };\r\n  } catch (error) {\r\n    console.error(\"Error starting Axon session:\", error);\r\n    return { success: false, error: \"Failed to start session\" };\r\n  }\r\n}\r\n\r\n// -------------------- GET INSTANT FEEDBACK --------------------\r\nexport async function getInstantFeedback(params: GetInstantFeedbackParams) {\r\n  const { sessionId, questionIndex, textAnswer, audioBlob } = params;\r\n\r\n  try {\r\n    const sessionDoc = await adminDb.collection(\"axon_sessions\").doc(sessionId).get();\r\n    if (!sessionDoc.exists) {\r\n      return { success: false, error: \"Session not found\" };\r\n    }\r\n\r\n    const sessionData = sessionDoc.data();\r\n    const currentQuestion = sessionData?.questions[questionIndex];\r\n\r\n    const { text: feedbackText } = await generateText({\r\n      model: google(\"gemini-2.0-flash-001\"),\r\n      system: \"You are a STRICT AI interviewer. Be critical and honest. Do NOT give positive feedback for random keywords or incoherent answers. Penalize heavily when candidates throw around buzzwords without context or give answers that don't address the question. Only reward genuine, well-structured responses that demonstrate real understanding.\",\r\n      prompt: `CRITICAL EVALUATION REQUIRED - Analysis ID: ${Date.now()}\r\n\r\nJob Role: ${sessionData?.jobRole || 'General'}\r\nExperience Level: ${sessionData?.experience || 'General'}\r\nQuestion: \"${currentQuestion}\"\r\nCandidate's Answer: \"${textAnswer}\"\r\n\r\nBE STRICT AND CRITICAL. Evaluate if this answer actually addresses the question with relevant, coherent content.\r\n\r\nRed flags to penalize heavily (give rating 1-3):\r\n- Random keywords without context or explanation\r\n- Buzzwords thrown together without meaning\r\n- Answers that don't address the actual question\r\n- Vague statements without specific examples\r\n- Technical terms used incorrectly or without context\r\n- Incoherent or nonsensical responses\r\n- One-word or extremely short answers\r\n\r\nOnly give high ratings (7-10) for:\r\n- Well-structured, coherent responses\r\n- Specific examples and concrete details\r\n- Proper use of relevant terminology\r\n- Clear demonstration of understanding\r\n- Answers that directly address the question\r\n\r\nProvide feedback in this JSON format:\r\n{\r\n  \"positives\": [\"ONLY list genuinely good points that actually address the question - if none exist, say 'No clear strengths identified'\"],\r\n  \"improvements\": [\"Be specific about what's wrong and how to fix it\"],\r\n  \"rating\": \"Score 1-10 - LOW (1-3) for poor/random answers, HIGH (7-10) only for genuinely good responses\"\r\n}\r\n\r\nIf the answer contains random keywords or doesn't make sense, give LOW rating and explain why it's inadequate.`\r\n    });\r\n\r\n    let feedback: any;\r\n    try {\r\n      // Extract JSON from markdown code blocks if present\r\n      let jsonText = feedbackText.trim();\r\n      if (jsonText.startsWith('```json')) {\r\n        jsonText = jsonText.replace(/```json\\s*/, '').replace(/\\s*```$/, '');\r\n      } else if (jsonText.startsWith('```')) {\r\n        jsonText = jsonText.replace(/```\\s*/, '').replace(/\\s*```$/, '');\r\n      }\r\n      \r\n      feedback = JSON.parse(jsonText);\r\n      // Ensure rating is a number and validate it\r\n      if (feedback.rating) {\r\n        const rating = parseInt(feedback.rating);\r\n        if (isNaN(rating) || rating < 1 || rating > 10) {\r\n          feedback.rating = \"3\"; // Default low rating for invalid responses\r\n        }\r\n      }\r\n    } catch (parseError) {\r\n      console.error(\"Failed to parse AI feedback:\", parseError);\r\n      // Default to critical feedback for parsing failures\r\n      feedback = {\r\n        positives: [\"No clear strengths identified\"],\r\n        improvements: [\"Response was unclear or incoherent. Please provide a structured answer that directly addresses the question with specific examples.\"],\r\n        rating: \"2\"\r\n      };\r\n    }\r\n\r\n    // Save the response with feedback\r\n    await adminDb.collection(\"axon_sessions\")\r\n      .doc(sessionId)\r\n      .update({\r\n        responses: [\r\n          ...(sessionData?.responses || []),\r\n          {\r\n            questionIndex,\r\n            answer: textAnswer,\r\n            feedback,\r\n            timestamp: new Date()\r\n          }\r\n        ]\r\n      });\r\n\r\n    return { success: true, feedback };\r\n  } catch (error) {\r\n    console.error(\"Error generating feedback:\", error);\r\n    return { success: false, error: \"Failed to generate feedback\" };\r\n  }\r\n}\r\n\r\n\r\nexport async function endAxonSession(params: { sessionId: string; userId: string }) {\r\n  const { sessionId, userId } = params;\r\n\r\n  try {\r\n    const sessionDoc = await adminDb.collection(\"axon_sessions\").doc(sessionId).get();\r\n    if (!sessionDoc.exists) {\r\n      return { success: false, error: \"Session not found\" };\r\n    }\r\n\r\n    const sessionData = sessionDoc.data();\r\n    \r\n    // Generate session summary\r\n    const { text: summaryText } = await generateText({\r\n      model: google(\"gemini-2.0-flash-001\"),\r\n      system: \"You are an interview coach providing a session summary.\",\r\n      prompt: `Summarize this AXON interview practice session:\r\n\r\nJob Role: ${sessionData?.jobRole}\r\nExperience Level: ${sessionData?.experience}\r\nTotal Questions: ${sessionData?.questions?.length || 0}\r\nTotal Responses: ${sessionData?.responses?.length || 0}\r\n\r\nResponses:\r\n${sessionData?.responses?.map((r: any, i: number) => \r\n  `Q${i + 1}: ${sessionData.questions[r.questionIndex]}\\nA: ${r.answer}\\nRating: ${r.feedback?.rating}/10`\r\n).join('\\n\\n') || 'No responses recorded'}\r\n\r\nProvide a brief summary of:\r\n1. Overall performance\r\n2. Key strengths observed\r\n3. Areas for improvement\r\n4. Recommendation for next steps`\r\n    });\r\n\r\n    await adminDb.collection(\"axon_sessions\").doc(sessionId).update({\r\n      status: \"completed\",\r\n      endTime: new Date(),\r\n      summary: summaryText\r\n    });\r\n\r\n    return { success: true, summary: summaryText };\r\n  } catch (error) {\r\n    console.error(\"Error ending Axon session:\", error);\r\n    return { success: false, error: \"Failed to end session\" };\r\n  }\r\n}\r\n\r\n\r\nexport async function getNextQuestion(params: { sessionId: string; currentIndex: number }) {\r\n  const { sessionId, currentIndex } = params;\r\n\r\n  try {\r\n    const sessionDoc = await adminDb.collection(\"axon_sessions\").doc(sessionId).get();\r\n    if (!sessionDoc.exists) {\r\n      return { success: false, error: \"Session not found\" };\r\n    }\r\n\r\n    const sessionData = sessionDoc.data();\r\n    const nextIndex = currentIndex + 1;\r\n\r\n    if (nextIndex >= sessionData?.questions.length) {\r\n      return { success: true, isComplete: true };\r\n    }\r\n\r\n    await adminDb.collection(\"axon_sessions\").doc(sessionId).update({\r\n      currentQuestionIndex: nextIndex\r\n    });\r\n\r\n    return {\r\n      success: true,\r\n      isComplete: false,\r\n      question: sessionData?.questions[nextIndex],\r\n      questionIndex: nextIndex\r\n    };\r\n  } catch (error) {\r\n    console.error(\"Error getting next question:\", error);\r\n    return { success: false, error: \"Failed to get next question\" };\r\n  }\r\n}\r\n\r\n\r\nexport async function getAxonSessionHistory(userId: string) {\r\n  try {\r\n    const sessionsQuery = await adminDb.collection(\"axon_sessions\")\r\n      .where(\"userId\", \"==\", userId)\r\n      .orderBy(\"startTime\", \"desc\")\r\n      .limit(10)\r\n      .get();\r\n\r\n    const sessions = sessionsQuery.docs.map(doc => {\r\n      const data = doc.data();\r\n      return {\r\n        id: doc.id,\r\n        ...data,\r\n        startTime: data.startTime?.toDate?.() || data.startTime,\r\n        endTime: data.endTime?.toDate?.() || data.endTime,\r\n        responses: data.responses?.map((response: any) => ({\r\n          ...response,\r\n          timestamp: response.timestamp?.toDate?.() || response.timestamp\r\n        })) || []\r\n      };\r\n    });\r\n\r\n    return { success: true, sessions };\r\n  } catch (error) {\r\n    console.error(\"Error fetching session history:\", error);\r\n    return { success: false, error: \"Failed to fetch session history\" };\r\n  }\r\n}\r\n"],"names":[],"mappings":"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","debugId":null}},
    {"offset": {"line": 395, "column": 0}, "map": {"version":3,"sources":["file:///C:/Users/lenovo/OneDrive/Desktop/interview-platform/.next-internal/server/app/axon/page/actions.js%20%28server%20actions%20loader%29"],"sourcesContent":["export {startAxonSession as '4048bf4eef464619bfe48ca6dba5cebfabd550e4e2'} from 'ACTIONS_MODULE0'\nexport {endAxonSession as '40543bb49f81bef48158616d275ebb129cdf00bbf9'} from 'ACTIONS_MODULE0'\nexport {getInstantFeedback as '40aa516ecc56453cb0cbc43d644773b707b61ab22f'} from 'ACTIONS_MODULE0'\nexport {getNextQuestion as '40854dd0a6e36249680e94d1cede50d7b16a86fdc2'} from 'ACTIONS_MODULE0'\nexport {getAxonSessionHistory as '40a99117bb534eca4f7e78ee830a8f0520228dc7e5'} from 'ACTIONS_MODULE0'\n"],"names":[],"mappings":";AAAA","debugId":null}},
    {"offset": {"line": 445, "column": 0}, "map": {"version":3,"sources":["file:///C:/Users/lenovo/OneDrive/Desktop/interview-platform/app/axon/page.tsx/__nextjs-internal-proxy.mjs"],"sourcesContent":["// This file is generated by next-core EcmascriptClientReferenceModule.\nimport { registerClientReference } from \"react-server-dom-turbopack/server\";\nexport default registerClientReference(\n    function() { throw new Error(\"Attempted to call the default export of [project]/app/axon/page.tsx <module evaluation> from the server, but it's on the client. It's not possible to invoke a client function from the server, it can only be rendered as a Component or passed to props of a Client Component.\"); },\n    \"[project]/app/axon/page.tsx <module evaluation>\",\n    \"default\",\n);\n"],"names":[],"mappings":"AAAA,uEAAuE;;;;;AACvE;;uCACe,IAAA,wQAAuB,EAClC;IAAa,MAAM,IAAI,MAAM;AAAqR,GAClT,mDACA","ignoreList":[0],"debugId":null}},
    {"offset": {"line": 459, "column": 0}, "map": {"version":3,"sources":["file:///C:/Users/lenovo/OneDrive/Desktop/interview-platform/app/axon/page.tsx/__nextjs-internal-proxy.mjs"],"sourcesContent":["// This file is generated by next-core EcmascriptClientReferenceModule.\nimport { registerClientReference } from \"react-server-dom-turbopack/server\";\nexport default registerClientReference(\n    function() { throw new Error(\"Attempted to call the default export of [project]/app/axon/page.tsx from the server, but it's on the client. It's not possible to invoke a client function from the server, it can only be rendered as a Component or passed to props of a Client Component.\"); },\n    \"[project]/app/axon/page.tsx\",\n    \"default\",\n);\n"],"names":[],"mappings":"AAAA,uEAAuE;;;;;AACvE;;uCACe,IAAA,wQAAuB,EAClC;IAAa,MAAM,IAAI,MAAM;AAAiQ,GAC9R,+BACA","ignoreList":[0],"debugId":null}},
    {"offset": {"line": 473, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"","debugId":null}}]
}