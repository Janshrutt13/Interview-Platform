{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 4, "column": 0}, "map": {"version":3,"sources":["file:///C:/Users/lenovo/OneDrive/Desktop/interview-platform/components/ui/input.tsx"],"sourcesContent":["import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nfunction Input({ className, type, ...props }: React.ComponentProps<\"input\">) {\n  return (\n    <input\n      type={type}\n      data-slot=\"input\"\n      className={cn(\n        \"file:text-foreground placeholder:text-muted-foreground selection:bg-primary selection:text-primary-foreground dark:bg-input/30 border-input h-9 w-full min-w-0 rounded-md border bg-transparent px-3 py-1 text-base shadow-xs transition-[color,box-shadow] outline-none file:inline-flex file:h-7 file:border-0 file:bg-transparent file:text-sm file:font-medium disabled:pointer-events-none disabled:cursor-not-allowed disabled:opacity-50 md:text-sm\",\n        \"focus-visible:border-ring focus-visible:ring-ring/50 focus-visible:ring-[3px]\",\n        \"aria-invalid:ring-destructive/20 dark:aria-invalid:ring-destructive/40 aria-invalid:border-destructive\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nexport { Input }\n"],"names":[],"mappings":";;;;;AAEA;;;AAEA,SAAS,MAAM,KAA4D;QAA5D,EAAE,SAAS,EAAE,IAAI,EAAE,GAAG,OAAsC,GAA5D;IACb,qBACE,6LAAC;QACC,MAAM;QACN,aAAU;QACV,WAAW,IAAA,qHAAE,EACX,8bACA,iFACA,0GACA;QAED,GAAG,KAAK;;;;;;AAGf;KAdS","debugId":null}},
    {"offset": {"line": 36, "column": 0}, "map": {"version":3,"sources":["file:///C:/Users/lenovo/OneDrive/Desktop/interview-platform/components/ui/label.tsx"],"sourcesContent":["\"use client\"\n\nimport * as React from \"react\"\nimport * as LabelPrimitive from \"@radix-ui/react-label\"\n\nimport { cn } from \"@/lib/utils\"\n\nfunction Label({\n  className,\n  ...props\n}: React.ComponentProps<typeof LabelPrimitive.Root>) {\n  return (\n    <LabelPrimitive.Root\n      data-slot=\"label\"\n      className={cn(\n        \"flex items-center gap-2 text-sm leading-none font-medium select-none group-data-[disabled=true]:pointer-events-none group-data-[disabled=true]:opacity-50 peer-disabled:cursor-not-allowed peer-disabled:opacity-50\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nexport { Label }\n"],"names":[],"mappings":";;;;;AAGA;AAEA;AALA;;;;AAOA,SAAS,MAAM,KAGoC;QAHpC,EACb,SAAS,EACT,GAAG,OAC8C,GAHpC;IAIb,qBACE,6LAAC,4KAAmB;QAClB,aAAU;QACV,WAAW,IAAA,qHAAE,EACX,uNACA;QAED,GAAG,KAAK;;;;;;AAGf;KAdS","debugId":null}},
    {"offset": {"line": 70, "column": 0}, "map": {"version":3,"sources":["file:///C:/Users/lenovo/OneDrive/Desktop/interview-platform/lib/actions/general.action.ts"],"sourcesContent":["\"use server\";\r\n\r\nimport { generateText } from \"ai\";\r\nimport { google } from \"@ai-sdk/google\";\r\n\r\nexport async function generateInterviewDossier(params: GenerateInterviewDossierParams) {\r\n    const { jobDescription, resume, companyName, concerns, isAxonMode = false } = params;\r\n\r\n    // Validate inputs\r\n    if (!jobDescription || !resume || !companyName) {\r\n        return { success: false, error: \"Missing required fields: jobDescription, resume, or companyName\" };\r\n    }\r\n\r\n    try {\r\n        console.log(\"Generating interview dossier with inputs:\", {\r\n            companyName,\r\n            jobDescriptionLength: jobDescription.length,\r\n            resumeLength: resume.length,\r\n            concernsLength: concerns.length\r\n        });\r\n\r\n        const prompt = isAxonMode ? `\r\nYou are AXON, an elite AI interview strategist. Your function is to generate a hyper-personalized, data-driven \"Interview Briefing.\"\r\n\r\nYour entire output must be in Markdown and strictly follow the structure below using the specified delimiters and formatting. Do not add any conversational text outside of this structure.\r\n\r\n<--BEGIN BRIEFING-->\r\n\r\n<--SECTION: HEADER-->\r\n# Interview Briefing: [Job Title] at ${companyName}\r\n**Synergy Score:** [Generate a numerical percentage score from 1-100 representing the match between the resume and job description, e.g., 85%]\r\n\r\n<--SECTION: SNAPSHOT-->\r\n## üöÄ Strategic Snapshot\r\n[In 3 bullet points, summarize the candidate's most compelling selling points. Frame them as \"strategic assets.\"]\r\n* **Strategic Asset 1:** ...\r\n* **Strategic Asset 2:** ...\r\n* **Strategic Asset 3:** ...\r\n\r\n<--SECTION: SKILL_ANALYSIS-->\r\n## üìä Skill Synergy Analysis\r\n[Identify the top 5 most important skills from the job description. For each, rate the candidate's experience from their resume on a scale of 1-5. Provide a brief justification.]\r\n* **[Skill Name 1]:** [Rating/5] - *Justification...*\r\n* **[Skill Name 2]:** [Rating/5] - *Justification...*\r\n* **[Skill Name 3]:** [Rating/5] - *Justification...*\r\n* **[Skill Name 4]:** [Rating/5] - *Justification...*\r\n* **[Skill Name 5]:** [Rating/5] - *Justification...*\r\n\r\n<--SECTION: QUESTIONS-->\r\n## üí° Intelligent Questions\r\n[Generate 8 questions. For EACH question, provide a rationale and at least one tag from this list: #Culture, #Technical, #Growth, #Strategy, #Logistics. Format each as a block.]\r\n\r\n**Question:** \"What does the onboarding process look like for this role, and what are the key milestones for the first 90 days?\"\r\n**Rationale:** This shows you are forward-thinking and focused on hitting the ground running effectively.\r\n**Tags:** #Logistics #Growth\r\n\r\n**Question:** \"How does the team handle collaboration on complex projects, especially when there are differing technical opinions?\"\r\n**Rationale:** This helps you understand the team's dynamic, communication style, and conflict resolution process.\r\n**Tags:** #Culture #Technical\r\n\r\n[...generate 6 more questions following this exact format...]\r\n\r\n<--SECTION: RED_FLAG_RADAR-->\r\n## üö© Red Flag Radar\r\n[Identify 1-2 potential gaps or concerns. For each, provide a \"Proactive Reframe\" strategy.]\r\n* **Potential Flag:** [Describe the gap, e.g., \"Lack of direct experience with Python.\"]\r\n    * **Proactive Reframe:** [Provide a strategy, e.g., \"Highlight your rapid learning ability by mentioning how you quickly mastered Java for the X project, and state your enthusiasm for applying that skill to Python.\"].\r\n\r\n<--END BRIEFING-->\r\n\r\n**INPUTS:**\r\nJob Description: ${jobDescription}\r\nResume: ${resume}\r\nCompany: ${companyName}\r\nConcerns: ${concerns}\r\n        ` : `\r\nYou are \"Interview Strategist AI,\" an expert career coach. Your task is to generate a personalized \"Interview Dossier\" based on the user's data.\r\n\r\nThe output must be in clean, well-formatted Markdown. Use \\`###\\` for each section title. Do not add any conversational intro or outro.\r\n\r\n---\r\n\r\n### üöÄ Your Key Selling Points\r\nAnalyze the resume against the job description. In 3-4 bullet points, summarize the user's strongest qualifications that make them an excellent fit.\r\n\r\n### üéØ Strategic Questions to Ask\r\nGenerate 8 insightful questions. For EACH question, add a brief \"Rationale\" in italics. Organize them into these categories using bold titles:\r\n**About the Role & Success**\r\n**About the Team & Culture**\r\n**About Company Strategy**\r\n\r\n### üö© Potential Gaps to Prepare For\r\nIdentify 1-2 potential gaps between the resume and the job description. For each, suggest a brief, proactive way to address it.\r\n\r\n### ‚≠ê Your Powerful Closing Statement\r\nCraft a concise, powerful closing statement template (2-3 sentences) that the user can adapt to end the interview on a high note.\r\n\r\n---\r\n**INPUTS:**\r\nJob Description: ${jobDescription}\r\nResume: ${resume}\r\nCompany: ${companyName}\r\nConcerns: ${concerns}\r\n        `;\r\n\r\n        const systemPrompt = isAxonMode \r\n            ? \"You are AXON, an elite AI interview strategist. Generate hyper-personalized, data-driven interview briefings with exact formatting and delimiters as specified.\"\r\n            : \"You are an expert career coach and interview strategist. Generate comprehensive, actionable interview preparation materials in clean Markdown format.\";\r\n\r\n        const { text } = await generateText({\r\n            model: google(\"gemini-2.0-flash-001\"),\r\n            prompt,\r\n            system: systemPrompt,\r\n        });\r\n\r\n        console.log(\"Generated text length:\", text?.length || 0);\r\n        console.log(\"Generated text preview:\", text?.substring(0, 200) || \"No text generated\");\r\n\r\n        if (!text || text.trim().length === 0) {\r\n            return { success: false, error: \"AI generated empty response\" };\r\n        }\r\n\r\n        return { success: true, dossier: text };\r\n    } catch (error) {\r\n        console.error(\"Error generating interview dossier:\", error);\r\n        return { success: false, error: `Failed to generate interview dossier: ${error instanceof Error ? error.message : 'Unknown error'}` };\r\n    }\r\n}\r\n\r\nexport async function generateChatResponse(params: {\r\n    interviewBriefing: string;\r\n    conversationHistory: Array<{ role: string; content: string; timestamp: Date }>;\r\n    userMessage: string;\r\n}) {\r\n    const { interviewBriefing, conversationHistory, userMessage } = params;\r\n\r\n    try {\r\n        // Format conversation history\r\n        const formattedHistory = conversationHistory\r\n            .map(msg => `${msg.role === \"user\" ? \"User\" : \"Coach\"}: ${msg.content}`)\r\n            .join(\"\\n\");\r\n\r\n        const { text } = await generateText({\r\n            model: google(\"gemini-2.0-flash-001\"),\r\n            prompt: `\r\n**ROLE & GOAL**\r\nYou are an AI Interview Coach, an expert assistant to the main \"AXON\" strategist. Your name is \"Coach.\" Your primary goal is to help a job candidate understand, expand upon, and practice with the specific \"Interview Briefing\" they have already generated. You must be encouraging, concise, and professional.\r\n\r\n**CONTEXT**\r\nYou will be given the complete [INTERVIEW BRIEFING] and the ongoing [CONVERSATION HISTORY]. All of your responses MUST be based on this context.\r\n\r\n**CAPABILITIES (What you CAN do):**\r\n\r\n1.  **Clarify Concepts:** If the user asks about an interview term (e.g., \"What is the STAR method?\"), provide a clear, concise definition.\r\n2.  **Generate More Questions:** If the user asks for more questions about a specific topic (e.g., \"Can you give me another question about team culture?\"), generate 1-2 relevant, insightful questions.\r\n3.  **Role-Play & Practice:** If the user says \"Let's practice\" or \"Ask me a question,\" you will act as the interviewer.\r\n    * Pick one of the insightful questions from the briefing.\r\n    * Ask it clearly.\r\n    * After the user provides their answer, give them brief, constructive feedback based on the STAR method (Situation, Task, Action, Result). The feedback should be encouraging.\r\n4.  **Company Research (Simulated):** If the user asks for more information about the company, provide a brief, professional summary as if you had just done a quick web search. Preface your answer with \"Based on publicly available information...\"\r\n5.  **Rephrasing & Tone:** If the user asks for help rephrasing a question or an answer, provide a better alternative, explaining why it's more effective.\r\n\r\n**RULES & CONSTRAINTS (What you CANNOT do):**\r\n\r\n* **DO NOT** invent facts about the company.\r\n* **DO NOT** answer questions outside the scope of interview preparation. If asked, gracefully respond with: \"My expertise is focused on helping you prepare for this interview. How about we practice one of the questions from your briefing?\"\r\n* **ALWAYS** be concise. Use bullet points and short paragraphs.\r\n\r\n---\r\n**INPUTS:**\r\n\r\n**[INTERVIEW BRIEFING]:**\r\n${interviewBriefing || \"No interview briefing available yet. Please generate one first.\"}\r\n\r\n**[CONVERSATION HISTORY]:**\r\n${formattedHistory}\r\n\r\n**[USER'S NEWEST MESSAGE]:**\r\n${userMessage}\r\n            `,\r\n            system: \"You are Coach, an AI Interview Coach. Be encouraging, concise, and professional. Focus only on interview preparation and practice.\",\r\n        });\r\n\r\n        if (!text || text.trim().length === 0) {\r\n            return { success: false, error: \"AI generated empty response\" };\r\n        }\r\n\r\n        return { success: true, message: text };\r\n    } catch (error) {\r\n        console.error(\"Error generating chat response:\", error);\r\n        return { success: false, error: `Failed to generate chat response: ${error instanceof Error ? error.message : 'Unknown error'}` };\r\n    }\r\n}\r\n\r\n"],"names":[],"mappings":";;;;;;;IAKsB,2BAAA,WAAA,GAAA,IAAA,kPAAA,EAAA,8CAAA,uOAAA,EAAA,KAAA,GAAA,6OAAA,EAAA","debugId":null}},
    {"offset": {"line": 85, "column": 0}, "map": {"version":3,"sources":["file:///C:/Users/lenovo/OneDrive/Desktop/interview-platform/components/InterviewStrategist.tsx"],"sourcesContent":["\"use client\";\r\n\r\nimport { useState, useEffect } from \"react\";\r\nimport { Button } from \"@/components/ui/button\";\r\nimport { Input } from \"@/components/ui/input\";\r\nimport { Label } from \"@/components/ui/label\";\r\nimport { generateInterviewDossier } from \"@/lib/actions/general.action\";\r\nimport { useSearchParams } from \"next/navigation\";\r\n\r\ninterface InterviewStrategistProps {\r\n  userName: string;\r\n  userId: string;\r\n}\r\n\r\nexport default function InterviewStrategist({ userName, userId }: InterviewStrategistProps) {\r\n  const searchParams = useSearchParams();\r\n  const [formData, setFormData] = useState({\r\n    jobDescription: \"\",\r\n    resume: \"\",\r\n    companyName: \"\",\r\n    concerns: \"\"\r\n  });\r\n  const [isGenerating, setIsGenerating] = useState(false);\r\n  const [dossier, setDossier] = useState<string>(\"\");\r\n  const [error, setError] = useState<string>(\"\");\r\n  const [isAxonMode, setIsAxonMode] = useState(false);\r\n  const [showAxonCompletionMessage, setShowAxonCompletionMessage] = useState(false);\r\n\r\n  useEffect(() => {\r\n    if (searchParams?.get('axon_completed') === 'true') {\r\n      setShowAxonCompletionMessage(true);\r\n      // Clear the URL parameter\r\n      window.history.replaceState({}, '', '/');\r\n    }\r\n  }, [searchParams]);\r\n\r\n  const handleInputChange = (field: string, value: string) => {\r\n    setFormData(prev => ({\r\n      ...prev,\r\n      [field]: value\r\n    }));\r\n  };\r\n\r\n  const handleGenerate = async () => {\r\n    if (!formData.jobDescription || !formData.resume || !formData.companyName) {\r\n      setError(\"Please fill in all required fields (Job Description, Resume, Company Name)\");\r\n      return;\r\n    }\r\n\r\n    setIsGenerating(true);\r\n    setError(\"\");\r\n    try {\r\n      const result = await generateInterviewDossier({\r\n        jobDescription: formData.jobDescription,\r\n        resume: formData.resume,\r\n        companyName: formData.companyName,\r\n        concerns: formData.concerns,\r\n        userId,\r\n        isAxonMode\r\n      });\r\n\r\n      if (result.success && result.dossier) {\r\n        console.log(\"Setting dossier:\", result.dossier.substring(0, 200));\r\n        setDossier(result.dossier);\r\n        setError(\"\");\r\n      } else {\r\n        console.log(\"Error result:\", result);\r\n        setError(result.error || \"Failed to generate interview dossier. Please try again.\");\r\n      }\r\n    } catch (error) {\r\n      console.error(\"Error generating dossier:\", error);\r\n      setError(\"An error occurred while generating the dossier.\");\r\n    } finally {\r\n      setIsGenerating(false);\r\n    }\r\n  };\r\n\r\n  const handleCopyToClipboard = () => {\r\n    navigator.clipboard.writeText(dossier);\r\n    alert(\"Dossier copied to clipboard!\");\r\n  };\r\n\r\n  console.log(\"Component render - dossier:\", dossier?.length || 0, \"isGenerating:\", isGenerating);\r\n\r\n  return (\r\n    <div className=\"max-w-6xl mx-auto space-y-8\">\r\n      <div className=\"text-center space-y-6\">\r\n        <h1 className=\"text-4xl font-bold\">\r\n          {isAxonMode ? \"AXON Interview Strategist\" : \"Interview Strategist AI\"}\r\n        </h1>\r\n        <p className=\"text-xl\">\r\n          {isAxonMode \r\n            ? \"Generate your hyper-personalized Interview Briefing\" \r\n            : \"Generate your personalized Interview Dossier\"\r\n          }\r\n        </p>\r\n        \r\n        {showAxonCompletionMessage && (\r\n          <div className=\"card-border max-w-2xl mx-auto\">\r\n            <div className=\"card\">\r\n              <div className=\"p-6 text-center\">\r\n                <div className=\"text-4xl mb-4\">üéâ</div>\r\n                <h3 className=\"text-xl font-bold text-success-100 mb-2\">AXON Session Completed!</h3>\r\n                <p className=\"text-light-100 mb-4\">\r\n                  Great job completing your AXON practice session! Now let's create a strategic dossier \r\n                  to prepare you for your actual interviews.\r\n                </p>\r\n                <Button \r\n                  onClick={() => setShowAxonCompletionMessage(false)}\r\n                  className=\"btn-primary\"\r\n                >\r\n                  Continue to Dossier Generation\r\n                </Button>\r\n              </div>\r\n            </div>\r\n          </div>\r\n        )}\r\n        \r\n        <div className=\"flex justify-center mt-8\">\r\n          <div className=\"card-border\">\r\n            <div className=\"card\">\r\n              <div className=\"p-2 flex gap-2\">\r\n                <button\r\n                  onClick={() => setIsAxonMode(false)}\r\n                  className={`px-6 py-3 rounded-lg text-base font-semibold transition-colors ${\r\n                    !isAxonMode \r\n                      ? \"bg-primary-200 text-dark-100 shadow-lg\" \r\n                      : \"hover:bg-dark-200 text-light-100\"\r\n                  }`}\r\n                >\r\n                  Phase 2: Dossier\r\n                </button>\r\n                <button\r\n                  onClick={() => window.location.href = '/axon'}\r\n                  className=\"px-6 py-3 rounded-lg text-base font-semibold transition-colors bg-success-100 text-dark-100 hover:bg-success-100/80 shadow-lg\"\r\n                >\r\n                  Phase 1: AXON Live Practice\r\n                </button>\r\n              </div>\r\n            </div>\r\n          </div>\r\n        </div>\r\n        \r\n        <div className=\"card-border mt-6\">\r\n          <div className=\"card\">\r\n            <div className=\"p-6\">\r\n              <h3 className=\"font-semibold mb-4\">Choose Your Phase:</h3>\r\n              <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4 text-sm\">\r\n                <div className=\"card-border\">\r\n                  <div className=\"card\">\r\n                    <div className=\"p-4\">\r\n                      <h4 className=\"font-semibold text-primary-200 mb-2\">Phase 1: AXON Live Practice</h4>\r\n                      <ul className=\"space-y-1\">\r\n                        <li>‚Ä¢ Real-time voice interaction</li>\r\n                        <li>‚Ä¢ Instant feedback on delivery</li>\r\n                        <li>‚Ä¢ 15-30 minute sessions</li>\r\n                        <li>‚Ä¢ Focus on communication skills</li>\r\n                      </ul>\r\n                    </div>\r\n                  </div>\r\n                </div>\r\n                <div className=\"card-border\">\r\n                  <div className=\"card\">\r\n                    <div className=\"p-4\">\r\n                      <h4 className=\"font-semibold text-success-100 mb-2\">Phase 2: Strategic Dossier</h4>\r\n                      <ul className=\"space-y-1\">\r\n                        <li>‚Ä¢ Deep profile analysis</li>\r\n                        <li>‚Ä¢ Comprehensive preparation</li>\r\n                        <li>‚Ä¢ Tailored question sets</li>\r\n                        <li>‚Ä¢ Long-term strategy planning</li>\r\n                      </ul>\r\n                    </div>\r\n                  </div>\r\n                </div>\r\n              </div>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n\r\n      {!dossier ? (\r\n        <div className=\"card-border\">\r\n          <div className=\"card\">\r\n            <div className=\"p-6\">\r\n              <div className=\"form space-y-6\">\r\n                <div className=\"grid grid-cols-1 md:grid-cols-2 gap-6\">\r\n                  <div className=\"space-y-2\">\r\n                    <Label htmlFor=\"companyName\" className=\"label\">Company Name *</Label>\r\n                    <Input\r\n                      id=\"companyName\"\r\n                      value={formData.companyName}\r\n                      onChange={(e) => handleInputChange(\"companyName\", e.target.value)}\r\n                      placeholder=\"e.g., Google, Microsoft, Amazon\"\r\n                      className=\"input\"\r\n                    />\r\n                  </div>\r\n                  <div className=\"space-y-2\">\r\n                    <Label htmlFor=\"concerns\" className=\"label\">Your Concerns (Optional)</Label>\r\n                    <Input\r\n                      id=\"concerns\"\r\n                      value={formData.concerns}\r\n                      onChange={(e) => handleInputChange(\"concerns\", e.target.value)}\r\n                      placeholder=\"e.g., Lack of experience with React, nervous about technical questions\"\r\n                      className=\"input\"\r\n                    />\r\n                  </div>\r\n                </div>\r\n\r\n                <div className=\"space-y-2\">\r\n                  <Label htmlFor=\"jobDescription\" className=\"label\">Job Description *</Label>\r\n                  <textarea\r\n                    id=\"jobDescription\"\r\n                    value={formData.jobDescription}\r\n                    onChange={(e) => handleInputChange(\"jobDescription\", e.target.value)}\r\n                    placeholder=\"Paste the complete job description here...\"\r\n                    className=\"input h-40 resize-vertical\"\r\n                  />\r\n                </div>\r\n\r\n                <div className=\"space-y-2\">\r\n                  <Label htmlFor=\"resume\" className=\"label\">Your Resume *</Label>\r\n                  <textarea\r\n                    id=\"resume\"\r\n                    value={formData.resume}\r\n                    onChange={(e) => handleInputChange(\"resume\", e.target.value)}\r\n                    placeholder=\"Paste your resume content here...\"\r\n                    className=\"input h-40 resize-vertical\"\r\n                  />\r\n                </div>\r\n\r\n                <Button \r\n                  onClick={handleGenerate} \r\n                  disabled={isGenerating}\r\n                  className=\"btn\"\r\n                >\r\n                  {isGenerating \r\n                    ? (isAxonMode ? \"Generating AXON Briefing...\" : \"Generating Dossier...\") \r\n                    : (isAxonMode ? \"Generate AXON Briefing\" : \"Generate Interview Dossier\")\r\n                  }\r\n                </Button>\r\n\r\n                {error && (\r\n                  <div className=\"card-border\">\r\n                    <div className=\"card\">\r\n                      <div className=\"p-4\">\r\n                        <p className=\"text-destructive-100 text-sm font-medium\">{error}</p>\r\n                      </div>\r\n                    </div>\r\n                  </div>\r\n                )}\r\n              </div>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      ) : (\r\n        <div className=\"space-y-6\">\r\n          <div className=\"flex justify-between items-center\">\r\n            <h2 className=\"text-3xl font-bold\">\r\n              {isAxonMode ? \"AXON Interview Briefing\" : \"Your Interview Dossier\"}\r\n            </h2>\r\n            <Button onClick={handleCopyToClipboard} variant=\"outline\" className=\"btn-secondary\">\r\n              Copy to Clipboard\r\n            </Button>\r\n          </div>\r\n          \r\n          <div className=\"card-border\">\r\n            <div className=\"card\">\r\n              <div className=\"p-6\">\r\n                <pre className=\"whitespace-pre-wrap text-sm leading-relaxed text-light-100\">\r\n                  {dossier || \"No content to display\"}\r\n                </pre>\r\n                <div className=\"mt-4 text-xs text-light-100 opacity-60\">\r\n                  Content length: {dossier?.length || 0} characters\r\n                </div>\r\n              </div>\r\n            </div>\r\n          </div>\r\n\r\n          <Button \r\n            onClick={() => {\r\n              setDossier(\"\");\r\n              setError(\"\");\r\n              setFormData({\r\n                jobDescription: \"\",\r\n                resume: \"\",\r\n                companyName: \"\",\r\n                concerns: \"\"\r\n              });\r\n            }}\r\n            variant=\"outline\"\r\n            className=\"btn-secondary w-full\"\r\n          >\r\n            {isAxonMode ? \"Generate New Briefing\" : \"Generate New Dossier\"}\r\n          </Button>\r\n        </div>\r\n      )}\r\n    </div>\r\n  );\r\n}\r\n"],"names":[],"mappings":"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","debugId":null}},
    {"offset": {"line": 794, "column": 0}, "map": {"version":3,"sources":["file:///C:/Users/lenovo/OneDrive/Desktop/interview-platform/node_modules/%40radix-ui/react-label/src/label.tsx"],"sourcesContent":["import * as React from 'react';\nimport { Primitive } from '@radix-ui/react-primitive';\n\n/* -------------------------------------------------------------------------------------------------\n * Label\n * -----------------------------------------------------------------------------------------------*/\n\nconst NAME = 'Label';\n\ntype LabelElement = React.ComponentRef<typeof Primitive.label>;\ntype PrimitiveLabelProps = React.ComponentPropsWithoutRef<typeof Primitive.label>;\ninterface LabelProps extends PrimitiveLabelProps {}\n\nconst Label = React.forwardRef<LabelElement, LabelProps>((props, forwardedRef) => {\n  return (\n    <Primitive.label\n      {...props}\n      ref={forwardedRef}\n      onMouseDown={(event) => {\n        // only prevent text selection if clicking inside the label itself\n        const target = event.target as HTMLElement;\n        if (target.closest('button, input, select, textarea')) return;\n\n        props.onMouseDown?.(event);\n        // prevent text selection when double clicking label\n        if (!event.defaultPrevented && event.detail > 1) event.preventDefault();\n      }}\n    />\n  );\n});\n\nLabel.displayName = NAME;\n\n/* -----------------------------------------------------------------------------------------------*/\n\nconst Root = Label;\n\nexport {\n  Label,\n  //\n  Root,\n};\nexport type { LabelProps };\n"],"names":[],"mappings":";;;;;;;AAAA,YAAY,WAAW;AACvB,SAAS,iBAAiB;AActB;;;;;AARJ,IAAM,OAAO;AAMb,IAAM,QAAc,2KAAA,CAAqC,CAAC,OAAO,iBAAiB;IAChF,OACE,aAAA,GAAA,IAAA,6KAAA,EAAC,qLAAA,CAAU,KAAA,EAAV;QACE,GAAG,KAAA;QACJ,KAAK;QACL,aAAa,CAAC,UAAU;gBAKtB;YAHA,MAAM,SAAS,MAAM,MAAA;YACrB,IAAI,OAAO,OAAA,CAAQ,iCAAiC,EAAG,CAAA;aAEvD,qBAAA,MAAM,WAAA,cAAN,yCAAA,wBAAA,OAAoB,KAAK;YAEzB,IAAI,CAAC,MAAM,gBAAA,IAAoB,MAAM,MAAA,GAAS,EAAG,CAAA,MAAM,cAAA,CAAe;QACxE;IAAA;AAGN,CAAC;AAED,MAAM,WAAA,GAAc;AAIpB,IAAM,OAAO","debugId":null}},
    {"offset": {"line": 830, "column": 0}, "map": {"version":3,"sources":["file:///C:/Users/lenovo/OneDrive/Desktop/interview-platform/node_modules/next/src/build/webpack/loaders/next-flight-loader/action-client-wrapper.ts"],"sourcesContent":["// This file must be bundled in the app's client layer, it shouldn't be directly\n// imported by the server.\n\nexport { callServer } from 'next/dist/client/app-call-server'\nexport { findSourceMapURL } from 'next/dist/client/app-find-source-map-url'\n\n// A noop wrapper to let the Flight client create the server reference.\n// See also: https://github.com/facebook/react/pull/26632\n// eslint-disable-next-line import/no-extraneous-dependencies\nexport { createServerReference } from 'react-server-dom-webpack/client'\n"],"names":["callServer","createServerReference","findSourceMapURL"],"mappings":"AAAA,gFAAgF;AAChF,0BAA0B;;;;;;;;;;;;;;;;IAEjBA,UAAU,EAAA;eAAVA,eAAAA,UAAU;;IAMVC,qBAAqB,EAAA;eAArBA,QAAAA,qBAAqB;;IALrBC,gBAAgB,EAAA;eAAhBA,qBAAAA,gBAAgB;;;+BADE;qCACM;wBAKK","ignoreList":[0],"debugId":null}}]
}